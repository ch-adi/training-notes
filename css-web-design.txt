**********************************************************


CSS and Web Design


**********************************************************

- Intro and Box Rendering Objects
- CSS Syntax
- How to use a Style Sheet
- Specificity
- Position
- Display
- Border
- width
- height
- Alignment
- div
- Float
- Buttons
- Scroll Animations
- px vs %
- Links
- Flexbox
- CSS Grid
- NavBar example
- Toolbar Example
- Side Draw Example
- Modals in React
- Using Media Queries to Disable an Element
- Lists
- Pseudo-elements generated by ::before and ::after
- Typography
- Color
- Working with Images
- Working with Icons
- Whitespace
- Define Your Project
- Responsive Web Design
- Quotes
- Forms
- PHP Example - email generated from form
- Footers
- Favicons
- Maps
- Website Optimisation
- Search Engine Optimisation
- Launch a Website
- Site Maintenance



Intro and Box Rendering Objects
------------------------------------------------


CSS stands for Cascading Style Sheets. 

CSS describes how HTML elements are to be displayed on screen, paper, or in other media, and is generally stored in .css files. 

Each node in the document tree generates zero or more 'rendering objects'. A rendering object is defined by a set of CSS properties. There are three types of rendering objects, one of which is the box, which is ment for screens. Boxes are rectangular objects with padding, borders, and margins. https://www.w3.org/TR/WD-CSS2-971104/box.html

Each box has a core content area (e.g., text, an image, etc.) and optional surrounding padding, border and margin areas. There are no properties to set the color of margins and padding; margins are always transparent and padding areas always uses the background of the element itself.

The total width of the box (resp., height) of the box is given by the sum of the content width (resp., height), the padding, the border, and the margin. The size of the margin, border and padding are set with the margin, padding, and border properties, respectively. However the css width property of the element is, by default, only the width of the content. It is not the total width. Likewise, the height of the element is the height of the content, i.e., the distance from inner top to inner bottom (see more in the width section). If box-sizing is set to border-box, however, it instead determines the width of the border area.

Margin properties are used to create space around elements, outside of any defined borders. Possible values are <length> | <percentage> | auto | inherit. Auto horizontally centers the element within its container. Negative values are possible. The initial value is 0. You can also use the em unit. This is relative to the element's font size: '1em' is equal to the size of the font in use.

Percentage values for margin on each side refer to the percentage of the box's alloted WIDTH (outer width). Say I specify margin-left and margin-right at 10%, the border is 1 px wide, and the content is currently 438px wide. Then the left and right margins are 55px: 55*2 + 1*2 + 438 = 550, and 10% of 550 is 55. The interesing thing is that margin-top will also be based off the same width (not height) calculation. All else being equal it too will be 55px for a 10% setting. Now, if remove margin-left and margin right, the content has more space to expand into the box (unless otherwise specified the box size is configured by the browser). The box is still the same size except the content now has a width of 548, plus 2px for the borders. So a 10% margin-top is still 55px. Specifying more margin will squeeze in the content. 

The padding properties describe how much space to insert between the border and the content (e.g., text or image). 


When specifying margin, padding and border, multiple arguments can be used:

	one value: all four border widths are set to that value
	two values: top and bottom border widths are set to the first value, right and left are set to the second
	three values: top is set to the first, right and left are set to the second, bottom is set to the third
	four values: top, right, bottom and left, respectively

At the start of a project it may be useful to just clean out all default margins and make everything box-sizing. It is also a good time to add in the font details.

    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box
    }

    html {
        background-color: #ffffff;
        color: #555;
        font-family: 'Lato', 'Arial', sans-serif;
        font-weight: 300;
        text-rendering: optimizeLegibility; 
    }

(if Lato is not available - say there is no internet connection - then Arial is the first back up. Then it's sans-serif).
(font-weight: 300; is available since it's one of the customise font weights we choose at google fonts)
(text-rendering: optimizeLegibility; makes the text rendering a lot smoother).

To use a google font you can either insert a link element into your header or use an import statement at the top of your style sheet:

    <link href="https://fonts.googleapis.com/css?family=Roboto" rel="stylesheet">

or

    @import url('https://fonts.googleapis.com/css?family=Roboto');




CSS Syntax
------------------------------------------------

A CSS rule-set (or just 'rule') consists of a selector and a declaration block. For example:

    h1 {
        color: blue; 
        font-size: 12px;
    }

Where h1 is the selector that points to the HTML element you want to style.

The declaration block contains one or more declarations separated by semicolons. Each declaration includes a CSS property name and a value, separated by a colon. 

The id selector allows the targeting of specific elements (use a # followed by the element's id):

    #para1 {
        text-align: center;
        color: red;
    }

    <p id="para1">Hello World!</p>
    <p>This paragraph is not affected by the style.</p>

While ids are often used for specific elements (which is not often good practice), class attribute selectors allow us to group elements. In the next example two different elements types are both styled by the same code:

    .center {
        text-align: center;
        color: red;
    }

    <h1 class="center">Red and center-aligned heading</h1>
    <p class="center">Red and center-aligned paragraph.</p>


We can also specify that only certain HTML elements should be affected by a class.

    p.center {
        text-align: center;
        color: red;
    }

    <h1 class="center">This heading will not be affected</h1>
    <p class="center">This paragraph will be red and center-aligned.</p>

A specific element can also be styled by more than one class:

    p.center {
        text-align: center;
        color: red;
    }

    p.large {
        font-size: 300%;
    }

    <h1 class="center">This heading will not be affected</h1>
    <p class="center">This paragraph will be red and center-aligned.</p>
    <p class="center large">This paragraph will be red, center-aligned, and in a large font-size.</p>


Selectors can be grouped. If elements have the same values then you can clean up the CSS (any any unique values stay in separate blocks):

    h1, h2, p {
        text-align: center;
        color: red;
    }

    h1 {
        font-size: 200%;
    }

Selectors can also and like an AND statement. Here the rule is applied if both js--wp-1 and the animated class both properties of the same element (we can think of jquery removing and adding classes as certain conditions arrise). 

    .js--wp-1.animated,
    .js--wp-2.animated,
    .js--wp-3.animated {
        opacity: 1;
    }

So in a way, these css rules are like if statements, sometimes using an OR, and sometimes using AND.


To change the style for the entire page use the body element selector:

    body {
        background-color: linen;
        font-size: 18px;
    }

This example also highlights the importance of CSS inheritance. Unless specified otherwise, all decendant elements will have a font size of 18 pixels.

Similary, the asterisk will affect all elements on our webpage. This example is a great way to override all element padding and margin defaults, as well as respecify the width property from content to border (see the box modal):

    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }

Or you can target child elements of, say, a class: 

    .className>* {
        /*Set flex elements to fill the space equally*/
        flex-grow: 1;
    }

Pseudo Selectors, such as :hover, help distinguish states such as a move hover:

	div {
        width: 100px;
        height: 100px;
        background: red;
        transition: width 2s;
	}

	div:hover {
    		width: 300px;
	}



Targeting Specific Class Elements:

While several elments may share the same CSS rule we can still distinguish them with individual styling. Say we have three elements that share the class name "call-out". We want each call-out element to have many style features in common, such as padding and margin, but we want each to have a different background:

.call-out {
	padding: 20px;
	margin-bottom: 20px;
	flex: 1;
}

.call-out:nth-child(1) {background-color: #c0dbe2;}
.call-out:nth-child(2) {background-color: #cdf1c3;}
.call-out:nth-child(3) {background-color: #ccb9da;}


We can also target, say the last of these three, with a different right margin:

.call-out:last-child {
	margin-right: 0;
}


With spaces we can also apply a hierachy of classes using just one class name. Consider these two buttons:

    <a class="btn btn-full" href="#">I'm hungry</a>
    <a class="btn btn-ghost" href="#">Show me more</a>

We can assign all common CSS property values to a .btn {} rule and then supply sub rules for each button type.

    .btn {
        display: inline-block;
        padding: 10px 30px;
        font-weight: 300;
        text-decoration: none;
        border-radius: 200px;
    }

    .btn-full {
        background-color: #e67e22;
        border: 1px solid #e67e22;
        color: #ffffff;
    }

    .btn-ghost {
        border: 1px solid #e67e22;
        color: #e67e22;
    }

A CSS selector can contain more than one simple selector. Between the simple selectors, we can include a combinator.

There are four different combinators in CSS:

    - descendant selector (space)
    - child selector (>)
    - adjacent sibling selector (+)
    - general sibling selector (~)

For example the following selects all p that are inside div elements:

    div p {
        background-color: yellow;
    }

Where as this selects all p that are immediate chilren of a div:

    div > p {
        background-color: yellow;
    }

And if we wanted to select all p that are siblings of divs:

    div ~ p {
        background-color: yellow;
    }

Or all p that are placed directly after a div (both with same parent):

    div + p {
        background-color: yellow;
    }

A CSS comment starts with /* and ends with */. Comments can also span multiple lines

One useful way to choose class names is the BEM Methodology; block, element, modifier. For example I might have a figure as a block, and it has a hero picture element. Two underscores are used in the element to extend the block name. If one element is different from elements of the same class then we use a double hyphen to indicate it is modified:

            <figure class="pizza">
                <div class="pizza__hero"></div>
                <div class="pizza__hero--type1"></div>
                <div class="pizza__hero"></div>
                <div class="pizza__img"></div>
                <div class="pizza__content"></div>
            </figure>





How to use a Style Sheet
--------------------------------------------------

There are three ways to insert a style : external, internal, and inline.

With an external style sheet each page must include a reference to the external style sheet file inside the <link> element. The <link> element goes inside the <head> section:

<head>
    <link rel="stylesheet" type="text/css" href="style.css">
</head>

An external style sheet can be written in any text editor. The file should not contain any html tags. The style sheet file must be saved with a .css extension.

An internal style sheet may be used if one single page has a unique style.

Internal styles are defined within the <style> element, inside the <head> section of an HTML page (as in the examples within the previous section).

An inline style may be used to apply a unique style for a single element. Just add the style attribute to the relevant element:

<h1 style="color:blue;margin-left:30px;">This is a heading.</h1>  [not that inline assignments use quotation marks ont he RHS of the assignment operator]

If the internal style is defined after the link to the external style sheet then the internal style sheet will be used. However, if the internal style is defined before the link to the external style sheet then the external will be used.



Eg1 internal used:

    <head>
        <link rel="stylesheet" type="text/css" href="mystyle.css">
        <style>
            h1 {
                color: orange;
            }
        </style>
    </head>



Eg2 external used:

    <head>
        <style>
            h1 {
                color: orange;
            }
        </style>
        <link rel="stylesheet" type="text/css" href="mystyle.css">
    </head>



Cascading order: 

1. Inline style (inside an HTML element)
2. External and internal style sheets (in the head section)
3. Browser default


You may also have enternal style Sheets you have downloaded, such as normalize.js (normalises styles accross all browsers). 

    <head>
        <link rel="stylesheet" type="text/css" href="./vendors/css/normalise.css">
        <link rel="stylesheet" type="text/css" href="./resources/css/style.css">
        <link href="https://fonts.googleapis.com/css?family=Lato:100,300,300i,400" rel="stylesheet">

        <title>Omnifood</title>
    </head>


Why does the order in which we place the scripts matter?

Our own script.js file should always be the last one. That's because of the dependencies we have in our code. For example, with jQuery, we use it in our script.js file., so it's a dependency. And we need to load that dependency before we can use it, of course. And that's why the jQuery should be loaded first. And the same of course applied to other external scripts.



Specificity
-------------------------------------------------

Specificity is the means by which browsers decide which CSS property values are the most relevant to an element and, therefore, will be applied. Specificity is a weight that is applied to a given CSS declaration, determined by the number of each selector type in the matching selector. When multiple declarations have equal specificity, the last declaration found in the CSS is applied to the element. Specificity only applies when the same element is targeted by multiple declarations. As per CSS rules, directly targeted elements will always take precedence over rules which an element inherits from its ancestor.

The following list of selector types increases by specificity:

    - Type selectors (e.g., h1) and pseudo-elements (e.g., ::before).
    - Class selectors (e.g., .example), attributes selectors (e.g., [type="radio"]) and pseudo-classes (e.g., :hover).
    - ID selectors (e.g., #example).

Universal selector (*), combinators (+, >, ~, ' ') and negation pseudo-class (:not()) have no effect on specificity. (The selectors declared inside :not() do, however.)

Inline styles added to an element (e.g., style="font-weight:bold") always overwrite any styles in external stylesheets, and thus can be thought of as having the highest specificity.

When an important rule is used on a style declaration, this declaration overrides any other declarations. Using !important, however, is bad practice and should be avoided because it makes debugging more difficult by breaking the natural cascading in your stylesheets.


Position
-------------------------------------------------

position: static - The default value for position. This basically says "let the browser lay this thing out without any special positioning". It will not react to the following properties: top, bottom, left, right, z-index.

position: relative - Allows you to position an element relative to it's static position using the offsets provided by the top, right, bottom and left properties, z-index. The element will remain in the natural flow of the page. It also makes the element positioned so that it will act as an anchor point for an absolutely positioned child.

position: fixed - The element will not remain in the natural flow of the page. It will position itself relative to the viewport(browser window, essentially) using the offsets provided by the top, right, bottom, left and z-index properties. Because it's positioned, it will act as an anchor point for an absolutely positioned child.

position: absolute - Allows you to position an element relative to it's first non statically positioned parent using the top, right, bottom, left and z-index properties. If there is no non-statically positioned parent, the <html> element will be used. The element will not remain in the natural flow of the page. It will position itself according to the closest positioned ancestor. Because it's positioned, it will act as an anchor point for an absolutely positioned child.

position: sticky 

Say you want to postion an element relative to a parent. Apply position: absolute on the div you want to position and then top, right, bottom, and left to control the exact positioning. However, if you just do this, you'll notice that the element positions itself relative to the <html> element. If you want to position it relative to something else (in your case, it's direct parent), you'll need to give that parent element a non-static position. Anything that's not position: static will work here (even another position: absolute) but in most cases, you likely want that parent element to just stay where it is without any special positioning. So in order to give that element "non-static positioning" without actually moving it from it's static position, you can actually give it position: relative, but don't specify any values for top, right, bottom, or left. This way you are positioning the element relative to it's static position by 0px.

Another example might be pushing one element to the right. For example we might have a blog post title, <h1>, and the date the blog post was written <p class="date">, both within a container <div class="blog-post">. And, we want the date to sit to the right of the title.

After positioning the container to relative, then:

    .date {
        position: absolute;
        top: 0px;
        right: 0px;
    }

So there is no difference between the right side of the parent container and data element.

Flexbox is the modern alternative (another option is float - see the section below).  

    .blogHead {
        /*Set the container to flex box*/
        display: flex;
        position: relative;
        border: 1px solid red;
        padding: 12px;
    }

    .blogHead>* {
        /*Set flex elements to fill the space equally*/
        flex-grow: 1;
    }

    .blogDate {
        text-align: right;
    }

    h1 {
        text-align: left;
    }


Note that other position related properties exist:

- right (left): defines the position of the element according to its right (left) edge.
- bottom (top): defines the position of the element according to its bottom (top) edge.


top examples:

- top: auto;  The element will remain in its natural position (default).
- top: 20px;   If the element is in position relative, the element will move downwards by the amount defined by the top value. If the element is in position absolute, the element will position itself from the top of the first positioned ancestor.



Display
--------------------------------------------------

The display property is the most important CSS property for controlling layout; it specifies if/how an element is displayed. The default display value for most elements is block or inline.

A block-level element always starts on a new line and takes up the full available width of the page (stretches out to the left and right as far as it can).

Examples of block-level elements:

	<div>
	<h1> - <h6>
	<p>
	<form>
	<header>
	<footer>
	<section>

An inline element does not start on a new line and only takes up as much width as necessary. This means that successive inline elements will sit alongside each other. Examples:

	<span>
	<a>
	<img>

(Using a span is thus a useful way to create in line styling for part of the inner HTML of a component).

Any height and width properties will have no effect.


Sometimes we want an inline element to have padding and margin properties (normally they don't). We can activate these options with display: inline-block;

display: none; is commonly used with JavaScript to hide and show elements without deleting and recreating them. The <script> element uses display: none; as default. You can also use visibility:hidden which means an element will not be seen but the layout does not change.

Some display values refer to inside elements, eg

    display: flow;
    display: table;
    display: flex;
    display: grid;


Border
-----------------------------------------------

The border property is a shorthand property for the following individual border properties:

	border-width
	border-style (required)
	border-color


Eg:

	border: 1px solid black;

The <border-width> value has these possible values:

'thin' | 'medium' | 'thick' | <length>


The border style properties refer to the <border-style> value type which is defined as follows:

	none | dotted | dashed | solid | double | groove | ridge | inset | outset


To round a border:
	border-radius: 5px;


To make sure the height really includes the padding and the border:

    box-sizing: border-box;

By using an invisible border, the border is generally invisible but this makes a differnce during hover.

    text-decoration: none;
    border-bottom: 4px solid transparant;

And so in :hover or :active we can then specify (looks cool):

    background-color: #8F5C2C;
    border-bottom: 4px solid #40A4C8;
    color: white;



width
-----------------------------------------------

The width CSS property specifies the width of an element. By default, the property defines the width of the content area. If box-sizing is set to border-box, however, it instead determines the width up to and including the border (so not the margin).

If width is set to auto then all the available horizontal space is used. If padding and/or margin is included, then all parts of the box, including the content adjust to fit.

If, instead, width is set at 100%, and then padding and a margin are set, then the element will spill over to the right. It is in this non-auto case that the width of an element does not include padding, borders, or margins. 

The min-width and max-width properties override the width property.


height
-----------------------------------------------

The height CSS property specifies the height of an element. By default, the property defines the height of the content area, which means the height of an element does not include padding, borders, or margins. If box-sizing is set to border-box, however, it instead determines the height of the border area. 

If height: auto; the element will automatically adjust its height to allow its content to be displayed correctly.

If height is set to a numeric value (like pixels, (r)em, percentages) then if the content does not fit within the specified height (of the parent element), it will overflow. How the container will handle the overflowing content is defined by the overflow property.


The min-height and max-height properties override height.


Alignment
--------------------------------------------------

Horizontal centering with css is easy. When the element to be centered is an inline element we use text-align center on its parent. When the element is a block level element we give it a width and set the left and right margins to a value of auto.

If you are trying to verically align text then don't set a width property. It just pushes the text around.

parent in flex box:

        display: flex;
        align-items: center;


div
--------------------------------------------------

<div> stands for divide, and is one of the most used elements in HTML.  


float
--------------------------------------------------
One alterative for lining up two divs, side by side, is to use float and width together. For example,

    .LHS_main_content {
        width: 75%;
        float: left;
    }

    .RHS_side_menu_or_links {
        width: 25%;
        float: right;
    }

Unlike flexbox we can still have a third div, like a footer just appear at the bottom without having to wrap up these first two elements in yet another div. 

However, now the footer needs to be told not to sit directly under the LHS side elements. Create a div just before the footer and give it the class name clearfix.

    <div class='clearfix'></ div>
    <footer .....

    .clearfix:after {
        content: "";
        display: table;
        clear: both;
    }

The clear property clears the float. The .clearfix class has the pseudo-element :after  because we want to properties, especially clear: both  (which does the real work of clearing the floats) to happen at the end of the element (after) on which we use the clearfix class. As for the other properties, there is no real explanation, this is just a "hack", which means that it solves the problem in a strange way. This (or in a slightly different version) is how everybody uses the clearfix.



[flexbox seems a lot easier to me! - and total divs are still the same. See this and another absolute positioning option in the position section, above].

Another way to use float is two push to items to one side. Say, in my footer I would like an image and then a name right next to it. Just give both the <img> and the <p> float: left . 


If you don't clear a float items begin to creep out of place or margin seem to disappear (inspect them in the dev tools. The highlight color will change to something like green). Supply parents of floating elements an extra class called clearfix and use this:

    .clearfix {
        zoom: 1;
    }

    .clearfix:after {
        content: '.';
        clear: both;
        display: block;
        height: 0;
        visibility: hidden;
    }



Buttons
--------------------------------------------------

If your button is made from an anchor/link, <a>, element then you will want to make sure it's style does not changed after a click.

    <a class="btn btn-full" href="#">I'm hungry</a>
    <a class="btn btn-ghost" href="#">Show me more</a>

 This requires the use of :visited. But, to lump this in with the default case, you will need the default pseudo selector, which is :link.

    .btn:link,
    .btn:visited {
        display: inline-block;
        padding: 10px 30px;
        font-weight: 300;
        text-decoration: none;
        border-radius: 200px;
    }

We also see that we line the buttons up with display: inline-block; and we don't want the underline to appear text-decoration: none;

You might also like to combine hover and active (when we are clicking on the button). In this case we want a darker color than the normal case. Transition is also a nice effect to make the change in state to hover more smooth (it takes multiple arguments; a time for each property you which to transition). The transition occurs as you move into and out of the relevant css rule. This example invovles two buttons with slightly different properties:

    .btn:link,
    .btn:visited {
        display: inline-block;
        padding: 10px 30px;
        font-weight: 300;
        text-decoration: none;
        border-radius: 200px;
        transition: background-color 0.2s, border 0.2s, color 0.2s;
    }

    .btn-full:link,
    .btn-full:visited {
        background-color: #e67e22;
        border: 1px solid #e67e22;
        color: #ffffff;
        margin-right: 15px;
    }

    .btn-ghost:link,
    .btn-ghost:visited {
        border: 1px solid #e67e22;
        color: #e67e22;
    }

    .btn:hover,
    .btn:active {
        background-color: #cf6d17; 
    }

    .btn-full:hover,
    .btn-full:active {
    border: 1px solid #cf6d17;
    }

    .btn-ghost:hover,
    .btn-ghost:active {
        border: 1px solid #cf6d17;
        color: #fff;
 }



Another example of a button formed from a link, but made from an image:

    <a href="#" class="btn-app"><img src="resources/img/download-app.svg" alt="App Store Button"></a>
    <a href="#" class="btn-app"><img src="resources/img/download-app-android.png" alt="Play Store Button"></a>



We can use jquery to have a button click scroll us to another part of the page.

    $(document).ready(function() {
        $('js--scroll-to-plans').click(function() {
            $('html, body').animate({scrollTop: $('js--section-plans').offset().top}, 1000ms;
        });
    });




Scroll Animations
-------------------------------------------------

We can use these to animate elements as you scroll down the page. This brings important elements to the attention of users as the navigate the cite. 

Powerful animations can be done with just CSS. Check out https://daneden.github.io/animate.css/. We can then use jquery to trigger those animations (see the jquery section in ./JavaScriptNotes.txt). 

In this case we need to set some way points where the animations will occur (this uses the waypoint plug in - see the navbar example). We also need to make the way points invisible until the animation occurs. Once animated we seach for both the waypoint's class name and the animated class (eg .js--wp-1.animated ) and set full opacity.

    .js--wp-1,
    .js--wp-2,
    .js--wp-3
    {
        opacity: 0;
        -webkit-animation-duration: 1s;
        animation-duration: 1s;
    }

    .js--wp-4 {
        -webkit-animation-duration: 1s;
        animation-duration: 1s;
    }

    .js--wp-1.animated,
    .js--wp-2.animated,
    .js--wp-3.animated {
        opacity: 1;
    }

(Waypoint 4 has a pulsing effect so doesn't need a change in opacity)


We need to import the animate plug in:

    <script src="vendors/css/animate.js"></script>

Here we apply a fade in to the first element, fade in up to the second wp element, and a pulse to the forth:

    $(document).ready(function() {
        
        $('js--wp-1').waypoint(function(direction) {   // at the first way point (a row) - also dont' actually need direction here
            $('.js--wp-1').addClass('animate fadeIn');  // adds the animate class so that the animate plug in can be used, and then apply the fadeIn class from there.
        }, {
            offset: '50%'   // giving half the height as a nice lead in.
        })

        $('js--wp-2').waypoint(function(direction) {   
            $(.js--wp-2).addClass('animate fadeInUp');  
        }, {
            offset: '50%'   
        })

        $('js--wp-3').waypoint(function(direction) {   
            $(.js--wp-3).addClass('animate fadeIn');  
        }, {
            offset: '50%'   
        })

        $('js--wp-4').waypoint(function(direction) {   
            $(.js--wp-4).addClass('animate pulse');  
        }, {
            offset: '50%'   
        })
    });





px vs %
--------------------------------------------------

So, we use px and % in different situations. We use percentages more for "layout" elements, which means elements that define the layout and that we want to change according to the screen width. Also, percentages are most useful for defining horizontal distances between elements, such as widths  or margin-left  or margin-right , not vertical distances, because responsive web design works with screen widths (horizontal). In other words, everything that we want to change based on the screen width when the screen becomes smaller, should be defined in %.

Also, font-sizes are always defined in %, except for the base font-size defined for the body element, so that we can easily change font-sizes for smaller screen sizes.

We use px to define some margins and paddings, and sometimes to define smaller distances and distances that doesn't need to change when the screen changes. For the paddings, please note that we can only use px here thanks to box-sizing: border-box; , which ensures that the box width (defined in %) always stays the same no matter how much padding we add inside of it.

In this example we have a span as a child element. Spans are only ever used to change the styling of one part of an inline element. Since the parent is using relative sizing and font weight, the span would normally inherit those properties. So in the span we restate those properties. Interestingly, though, we can't just put font-size back to 100%. This would be 100 % of the parent's height. It is not 100% of the project wide default. This means we have to give a very small percentage, which is 30% in this case.

    .plan-price {
        font-size: 300%;
        margin-bottom: 10px;
        font-weight: 100;
        color: #e67e22;
    }

    .plan-price span {
        font-size: 30%;
        font-weight: 300;
    }


Links
--------------------------------------------------

    a:link,
    a:visited {
        color: #e67e22;
        text-decoration: none;
        padding-bottom: 1px;
        border-bottom: 1px solid #e67e22;
        transition: border-bottom 0.2s, color 0.2s;
    }

    a:hover,
    a:active {
        color: #555;
        border-bottom: 1px solid transparent;/* since we have removed text decoration above, and use our border, transparant is the easy way to remove it*/
    }


Flexbox
--------------------------------------------------

There are 10 flexbox properties. There are 5 container/parent properties and 5 child properties. However you must first declare the parent as a flex container:

	display: flex;

All of the container's direct children are now flex-items. 


A flex container has these properties (default in brackets):

flex-direction (row), flex-wrap (no-wrap), justify-content (flex-start), align-items (stretch), align-content (stretch).

Within a container there are two perpendicular axes. The main axis and the cross axis. We can align items on both of these axes. The main axis is set by the flex-direction property. So in the default case (flex-direction: row;) the main axis goes from left to right across the container. 

The align items property is then used to organise items in relation the cross axis. For example if the cross axis was vertical, then align-items: center; would vertically center the items. They line up accross the center of the vertical axis.

The justify content property is used to align items on the main axis. 

So to easily center an element include this in the parent:

    display: flex;
    align-items: center;
    justify-content: center;

Also, if an element only contains inner text then you can still use this in the element to center that text.

The child properties are: 

align-self (auto), order, flex-grow (0), flex-shrink (1), and flex basis (auto).

In addition to the two axes, another important flex concept is start and end. For example in the default row direction flex-start is on the left while flex-end is on the right. If the flex-direction was row-reverse, then flex-end and flex-start would be reversed. 

So in the default case (flex-direction of row) all flex-items (direct children) behave in this way:

    - Items display in a row from the left to the right edge
    - The items do not stretch on the main dimension, but can shrink to squeeze in (dependant on width of text, etc)
    - The items will stretch to fill the size of the cross axis.
    - The flex-basis property is set to auto. Each item only takes a the minimum about of width on the main axes. When the total minimum across all items is less that that of the container, there will be white space on the right of the container.
    - The flex-wrap property is set to nowrap. If items cannot shrink enough to fit on the main axis then no new main axis (essentially a new container) will be created. Instead overflow will happen.

The result of this is that your items will all line up in a row, using the size of the content as their size in the main axis. If there are more items than can fit in the container, they will not wrap but will instead overflow. If some items are taller than others, all items will stretch along the cross axis to fill its full size.

Flex-grow, flex-shrink , and flex basis can be combined into one 'flex' property, that then has three default arguments:

    flex: 0 1 auto;

The last, flex basis, is where we define the width of the item before the remaining space is distributed via flex-grow. The default, auto, only use the bare minimum along the main axis. If the item dosn’t have a set width/height then the inner content's size is used as the flex-basis. 

If we want an item to use 45% of the available space in the main direction:

    flex: 0 1 45%;   /* aka flex-basis: 45%; */

We can then begin assigning remaining space with flex-grow. If only one element has a flex grow value it will fill the remianing space. Given the previous example, we give 45% of the space, we just set it's neighbour to flex-grow.

    flex: 1;  /* aka flex-grow: 1; */

If more than one item has a flex-grow value the remaining space is filled alloted in the ratio of their flex-grow values.

If we do not have enough space in the container to lay out our items and flex-shrink is set to a positive integer the item can become smaller than the flex-basis. As with flex-grow different values can be assigned in order to cause one item to shrink faster than others — an item with a higher value set for flex-shrink will shrink faster than its siblings that have lower values.


For one particular child element, you can override a parent property like align-items with align-self.

align-content is useful for cases of multiple main axes (wrapping). This aligns a flex container's lines within when there is extra space in the cross-axis, similar to how justify-content aligns individual items within the main-axis. This property has no effect when there is only one line of flex items.


Order:


We can order elements within a flex container without having to cut and paste child divs in the html (which we may not want to do for search engine purposes). For the first element use:

 order: 1; 

And the second used order: 2;  etc. 

In this CSS example we have a container div with the class name "column-layout". We make it a flex container with the CSS value display: flex. Within it are three children. One is the main column, which we would like in the middle and with much more space, and then two small side bars. One side bar is on the left and one on the right:

	.column-layout {

		max-width: 1300px;
		backfround-color: #FFF;
		margin: 40px auto 0 auto;
		line-height: 1.65;
		padding: 20px 50 px;
		display: flex;
	}

	.main-column {
		flex:3;
		order: 2;
	}

	.sidebar-one {
		flex: 1;
		order: 1;
	}

	.sidebar-two {
		flex: 1;
		order: 3;
	}






Uniform vs Non-Uniform Height:


One of the strengths of flex is equal heights. For example we may have three child elements arrange across the page. Each child has a different amount of text but they will all be the same height. However, should we not want this property we can use the following CSS value in the parent CSS rule:

	align-items: flex-start;


The three elements will be aligned across the top, or start of the flex container, and drop to different lengths. If we would like the three elements to be flush along the bottom of the parent container then we use:

	align-items: flex-end;

To centre the three elements around the middle of the parent flex container, we can use:

	align-items: center;

(The default, which was always there, was align-items: stretch; )




Margins:

In non-flex CSS we could just target individual margins for each child element. However, there is a flex approach. In the child CSS rule change flex: 1 to a wdith percentage (note if you assign both padding and width CSS values ,then you should also use box-sizing: border-box so that the math stays as simple as possible):

    .call-out {
        padding: 20px;
        box-sizing: border-box;
        margin-bottom: 20px;
        width: 30%   
    }

(An alternative to width, and really the proper flexbox way, is to use flex-basis: 30%)

Since there are 3 elements we now have used 90% of the available space. This leaves 10% to evenly divide up as margins. We do this by targeting the parent element with a justify content value:

    .call-outs-container {
        max-width: 1400px;
        margin: 40px auto 0 auto;
        display: flex;
        justify-content: space-between;
    }

The default value for justify-content is start. This will push all three children to the left and leave the 10% at the end, or right. Using 'end' as a value will move the three elements to the right, and consequently leave the 10% of background color on the left, or start. The value "center" will align the content in the midle of the parent container, leaving 5% background on each side.




Layout for Small Screens like Tablets and Smart Phones:

For a quick idea as to how your page will look on a small screen just resize the browser window. One problem is that child text ends up looking very squeezed if the children are left felxed accross the screen. Lines of text become only a few words across. For small screens we need paragraphs to sit on top of each other.

If we remove the flex and justify parent values, we can then reintroduce them with a media query that targets screen sizes over 900 pixels:

	.call-outs-container {
		max-width: 1400px;
		margin: 40px auto 0 auto;
		display: flex;
		justify-content: space-between;
	}

	.call-out {
		padding: 20px;
		box-sizing: border-box;
		margin-bottom: 20px;
		width: 30%   
	}


	@media (min-width: 900px) {
		.call-outs-container {
			display: flex;
			justify-content: space-between;
	}

So the flex properties will only apply to a large screen now.



Multiple Rows of Items on Smaller Screens:


Say we have a number of elements in a row across a flex container, and each of these elements is of a fixed size (eg 150px x 100px). As the screen size decreases flex will narrow the margin between each elements but as the screen becomes very small flex becomes stubborn. It will refuse to push elements into another row. Instead the elements will begin to merge. We can tell flexbox to make multiple rows with a the flex-wrap property in the parent container. By default it is set to 'nowrap'. In the parent CSS rule use:

	flex-wrap: wrap;


Simple Centering:

In this example we want to centre some text, "Center Me Please" both vertically and horizontally within a box (with a class name of "banner").

original html:

<div class="banner">
	div class="center-me">Center Me Please</div>
<div>


original CSS:


.banner {
	height: 400px;
	max-width: 700px;
	margin: 40px auto 40px auto;
	background-color: #2a2a2a;
}

.center-me {
	color: #FFF;
	font-size: 50px;
}

We are not going to fix the width and height values of the text. It will dynammically change as required (in the past centering content with an unkown width and height has been notoriously tricky). Without flex box we could have used text-align: center to horizontally center the text. 'margin: 0 auto;" has been around a long time. It adds no vertical margin set the horizontal margins to auto. However the vertically centering would have still been tricky.

With flexbox we tell the parent container to use flex box. We then use "margin: auto" in the child CSS rule to auto margin in all directions. Flexbox works very well with this property.

.banner {
	height: 400px;
	max-width: 700px;
	margin: 40px auto 40px auto;
	background-color: #2a2a2a;
	display: flex;
}

.center-me {
	color: #FFF;
	font-size: 50px;
	margin: auto;
}



Nesting and Changing Direction:


We can make child containers flex containers as well:

	.parent {
		display: flex;
	}

	.some-other-child {
		flex: 1;
	}

	.child {
		flex: 1;
		display: flex;
		flex-direction: column; 
	}

	.grand-child-1 {
		flex: 1;	
	}

	.grand-child-1 {
		flex: 1;	
	}


By default flex-direction is set to row.

So now we have two children side by side, and then two grandchildren, on the right hand side, with one on top of the other. We have made a nice mixture of rows and columns.



CSS Grid
--------------------------------------------

You can use this to layout elements in a 2 dimensional grid. 




NavBar Example
---------------------------------------------

    <nav>
        <div class="row">
            <img src="./resources/css/img/logo-white.png" alt="Omnifood logo" class="logo">
            <ul class="main-nav">
                <li><a href="#">Food delivery</a></li>
                <li><a href="#">How it works</a></li>
                <li><a href="#">Our cities</a></li>
                <li><a href="#">Sign up</a></li>
            </ul>
        </div>
    </nav>

    .logo {
        height: 100px;
        width: auto;
        float: left;
        margin-top: 20px;
    }

    .main-nav {
        float: right;
        list-style: none;
        margin-top: 55px;
    }

    .main-nav li {
        display: inline-block;
        margin-left: 40px;
    }

    .main-nav li a:link,
    .main-nav li a:visited {
        padding: 8px 0;
        color: #fff;
        text-decoration: none;
        text-transform: uppercase;
        font-size: 90%;
        border-bottom: 2px solid transparent;
        transition: border-bottom 0.2s;
    }

    .main-nav li a:hover,
    .main-nav li a:active {
        border-bottom: 2px solid #e67e22;
    }




We can use jquery to make an aditional sticky navigation bar. Once we scroll down into a section we we still want to see a modified nav bar.

Consider the nav element that will have the className "sticky" (it does not actually have it yet though):

    <nav className='sticky'> ...

Unlike our usual navbar the background color will be transparant white. This means that some properties, like text color will need to change. Otherwise nav items will not be visible. Also, we need a different icon. This means that we actually insert a dark version of our icon directly in the HTML alongside our existing icon.

                    <img src="resources/img/logo-white.png" alt="Omnifood logo" class="logo">
                    <img src="resources/img/logo.png" alt="Omnifood logo" class="logo-black">

But, by default this new logo is hidden:

    .logo-black {
        display: none;
    }

However, if logo-black is inside the nav, then it will display as block and the normal logo will no longer display:

    .sticky .logo-black {
        display: block;
    }

    .sticky .logo {
        display: none;
    }


So altogether, in CSS we adjust margins, colors and text properties to match the small fixed div:

    .sticky {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        background-color: rgba(255, 255, 255, 0.98); /* we need a little transparancy so that we can see the content underneath */
        box-shadow: 0 2px 2px #efefef;  /* helps to distinguish from the white background of a normal section */
        z-index: 9999;  // helps in thos cases where the nav bar gets stuck behind images.
    }

    .sticky .main-nav { margin-top: 18px; }

    .sticky .main-nav li a:link,
    .sticky .main-nav li a:visited {
        padding: 16px 0;
        color: #555;
    }

    .sticky .logo { display: none; }
    .sticky .logo-black { display: block; }

We can now use the waypoint library to trigger a function when we scroll to a certain element. Download it and import:

    <script src="vendors/js/jquery.waypoints.min.js"></script>

    $(document).ready(function() {
        $('js--section-features').waypoint(function(direction) {   // js--section-features is the class name of the waypoint
            if (direction == 'down') {
                $('nav).addClass('sticky');  // adds the sticky class to the nav element
            } else {
                $(nav).removeClass('sticky)
            }
        }, {
            offset: '60 px';   // the class name change will happen 60 pixels before the waypoint - looks nicer
        })
    });


Responsive nav bar design example

As screen size decreases the nav bar is replace with an button. When the button is tapped the navigation options scroll down the page. 

    <a class="mobile-nav-icon js--nav-icon"><i class="ion-navicon-round"></i></a>


    
    /* Mobile navi */

    .mobile-nav-icon {
        float: right;
        margin-top: 30px;
        cursor: pointer;    /* When we didn't specifiy the href no pointer appears. So we specifially bring it in here. */
        display: none; /* will only appear for samll screens*/
    }

    .mobile-nav-icon i {
        font-size: 200%;
        color: #fff;
    }

    @media only screen and (max-width: 767px) {
        .mobile-nav-icon {display: inline-block;}
        
        .main-nav li { display: block; } /* The navigation items will now display verticaly. */

        .main-nav li a:link,      /* no hover required for a mobile phone*/
        .main-nav li a:visited {
            display: block;
            border: 0;
            padding: 10px 0;
            font-size: 100%;
        }
    }

The sticky navigation from the previous example also needs to be updated:

    .sticky .main-nav { margin-top: 10px; }

    .sticky .main-nav li a:link,
    .sticky .main-nav li a:visited { padding: 10px 0; }
    .sticky .mobile-nav-icon { margin-top: 10px; }
    .sticky .mobile-nav-icon i { color: #555; } /* need to be able to see the icon on the white sticky background*/


In J-query we can create and open and close effect:

    $('js--nav--icon').click(function () {
        var nav = $('.js-main-nav');
        var icon = $('.js-nav-icon');

        nav.slideToggle(200);

        // Now, when the menu is open we want our icon to change into a cross.
        // The icon is defined by the class. When we want to change the icon we need to change the class.

        if(icon.hasClass('icon-navicon-round')) {
            icon.addClass('ion-close-round i');
            icon.removeClass('icon-navicon-round');
        } else {
            icon.addClass('icon-navicon-round');
            icon.removeClass('ion-close-round');
        }
    }) 




Toolbar Example
-----------------------------------------

In this styling we want a fix positon at 0,0 so that it always sits at the top. Flex helps the sub elements sit nicely with each other with space between, and then align-items handles vertical alignment. We set a z-index less than that of the backdrop. We also make sure any navigation items span the full height of the toolbar.

    .Toolbar {
        height: 56px;
        width: 100%;
        position: fixed;
        top: 0;
        left: 0;
        background-color: #703B09;
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 0 20px;
        box-sizing:  border-box;
        z-index: 90;
    }

    .Toolbar nav {
        height: 100%
    }


For a logo image in the toolbar we might like to use box sizing so that padding is included in the total height.

    .Logo {
        background-color: white;
        padding: 8px;
        height: 80%;
        box-sizing: border-box;
        border-radius: 5px;
    }

    .Logo img {
        height: 100%;
    }



Side Draw Example
-------------------------------------------------------

    .SideDrawer {
        position: fixed;
        width: 280px;
        max-width: 70%;
        height: 100%;
        left: 0;
        top: 0;
        z-index: 200;
        background-color: white;
        padding: 32px 16px;
        box-sizing: border-box;
        transition: transform 0.3s ease-out;
    }

    @media (min-width: 500px) {
        .SideDrawer {
            display: none;
        }
    }

    .Open {
        transform: translateX(0);
    }

    .Close {
        transform: translateX(-100%);
    }

We see a fixed position on the top left, a z-index above the backdrop, a transition property to react to changes of the transform property and animate them over 300 ms with a ease-out timing function. The transform property is affected by the Open and Close classes. 

The media query is for larger devices, which do not display a side drawer.

The Open and Close classes are conditionally activated in React. They are responsible for animation. Open shifts the panel to the 0,0 fixed positon defined above. Close shifts it all to the left.

Now we want to insert a toogle button that consists of three vertical lines. In the component make three divs and then:

    .DrawerToggle {
        width: 40px;
        height: 100%;
        display: flex;
        flex-flow: column;
        justify-content: space-around;
        align-items: center;
        padding: 10px 0;
        box-sizing: border-box;
        cursor: pointer;
    }

    .DrawerToggle div {
        width: 90%;
        height: 3px;
        background-color: white;
    }

    @media (min-width: 500px) {
        .DrawerToggle {
            display: none;
        }
    }



Modals in React
---------------------------------------------------

Create a new UI folder under components (for UI components) and then create a sub folder called Modals. Also create another subfolder named Backdrop. We create a separate backfrop feature because we may want to use it elsewhere, perhaps in the sidebar.

It's just a normal functional component with special styling:

    .Modal {
        position: fixed;
        z-index: 500;
        background-color: white;
        width: 70%;
        border: 1px solid #ccc;
        box-shadow: 1px 1px 1px black;
        padding: 16px;
        left: 15%;
        top: 30%;
        box-sizing: border-box;
        transition: all 0.3s ease-out;
    }

    @media (min-width: 600px) {
        .Modal {
            width: 500px;
            left: calc(50% - 250px);
        }
    }

At a higher level we insert the modal and pass on some methods that allow us to later check if the modal should be open, and update that state. We also include the contents of the modal (here <OrderSummary>) as props.children.

    <Modal show={this.state.purchasing} modalClosed={this.purchaseCancelHandler} >
        <OrderSummary ingredients={this.state.ingredients} />
    </Modal>
    <BuildControls 
        // ...
        ordered={this.purchaseHandler} />

(ordered={this.purchaseHandler} feeds into the order button)


The associated backdrop usess 100% of the width and height, is fixed (so it's not scrollable), and has a z-index so that it sits between the modal and the regular components.

    .Backdrop {
        width: 100%;
        height: 100%;
        position: fixed;
        z-index: 100;
        left: 0;
        top: 0;
        background-color: rgba(0, 0, 0, 0.5);
    }

    import React from 'react';
    import classes from './Backdrop.css';

    const backdrop = (props) => (
        props.show ? <div className={classes.Backdrop} onClick={props.clicked}></div> : null
    );

    export default backdrop;

We can also use the CSS transition property within a conditional inline style object (vh is the unit for vertical height). This gives us some animation.
There are a number of places this can be imported. To save on making stateful components we will just place it inside the modal component. 

    import React from 'react';
    import classes from './Modal.css';
    import Aux from '../../../hoc/Auz';
    import Backdrop from '../Backdrop/Backdrop'

    const modal = (props) => (
        <Aux>
            <Backdrop show={props.show} clicked={props.modalClosed}/>
            <div 
                className={classes.Modal}
                style={{
                    transform: props.show ? 'TranslateY(0)' : 'TranslateY(-100vh)',
                    opacity: props.show ? '1': '0'
                }}>
                {props.children}
            </div>
        </Aux>
    );

    export default modal;



Using Media Queries to Disable an Element
----------------------------------------------

After setting up a media-query verison of css classes, go through and delete any duplicates. Media queries are later merged with the original classes. 

With media queries and props we can diable entire sub features within certain media based parents (ie we have a side drawer that only exists for mobile devices and so we don't want any tool bar navigation items to appear):

    <nav className={classes.DesktopOnly}>
        <NavigationItems />
    </nav>

    @media (max-width: 499px) {
        .DesktopOnly {
            display: none;
        }
    }



Lists
-----------------------------------------------

If you don't want list items to have default values:

    list-style: none;

To ensure your specified height has an effect in a list:

    display: block;




Pseudo-elements generated by :before and :after
-----------------------------------------------

With :before and :after we can create elements purely with CSS. 

In this example we create a custom orange underline for h2 elements:

    h2:after {
        display: block;
        height: 2px;
        background-color: #e67e22;
        content: " ";
        width: 100px;
        margin: 0 auto;
        margin-top: 30px;
    }

We must always specify a content property. But, like here, we can leave it blank since we don't want any text in this element.

You can see another example, with the content property in use, in the quote section. 



Typography
-----------------------------------------------

Typography is the art and technique of arranging type to make written language readable and beautiful. It is therefore essential for web design.

Flat design is the modern norm. Buttons and icons do not have shadding or 3-d like features.

15-25 px font size for regular text. 

Headlines have no real font size limits, eg 60px, or even 90px, but at the larger end you will won't to decrease the font-weight of the text. The text will then detract less from other elements, and be more slim-lined and modern.

Use line spacing of between 120-150% of the font size. This makes text easier to read. 45-90 characters per line is the optimal length to read.

.long-copy {
    line-height: 145%;
    width: 70%; /* limits the characters per line but ruins centering*/
    margin-left: 15%; /*fixes the centering problem. Given 70% above, 15 + 15 is the remainder */
}

(long-copy is for our longer text paragraphs, where 'copy' has the old usage meaning text)


Choose good looking fonts. Sans serif typefaces are more netrual, clean and clear. Use these on most modern websites. You might want serif fonts for traditional purposes, storytelling and long reading.

Google fonts is a good free resource. Some good sans fonts include
    - open sans
    - lato 
    - railway
    - monsterrat
    - PT sans

Some good serif fonts include:
    - Cardo
    - Merriweather
    - PT serif

Overall, however, choose a font that best represents the feel of your website. And if you are a beginner, use only one typeface. There is a section in this e-book that helps you pair fonts file:///C:/Users/chamilton/Downloads/website-e-bookv2.0.pdf .

Here we see the styling for a headling element that sits in the middle of the screen above a large image:

    h1 {
        margin: 0;
        color: #ffffff;
        font-size: 240%;
        font-weight: 300;
        text-transform: uppercase;
        letter-spacing: 1px;
        word-spacing: 4px;
    }

The white text color is for contrast with the transparant black background on the image (see below on working with images). font-size is relative to the globally defined font-size, so will automatically update when the global value changes. Because it's quite a large font, we use font-weight to slim it down (we imported this custom font weight from google fonts). To make it look nice we also transform the text to uppercase and give the letters and words some spacing.

Sometimes we may have columns of identical information but one line may be inapplicable in one column. Say, for example, a p element has no content in one of the columns. Don't delete the p element. This could mess up the styling for the entire column and make the columns look different. Instead keep it there empty. However, it must have some actual content. Do this with a special entity (see HTML_notes.txt):

    <p class="plan-price-meal">&nbsp;</p>



Color
-------------------------------------------

This is one of the most difficult parts of web design. You do not want distracting colors. They look out of place and make the website look messy.

Use just one base/main color for your design. That is, any colour except black, white, or any shade of grey. You then create a nice color-palete by using related shades (there are tools for this such as https://flatuicolors.com or http://www.0to255.com/ - the later can give us shade variations). 

If you really want to mix up multiple colours use a color-wheel. They make use of color theory to make good combinations for you.

Use the main color to draw attention to the main elements on your web page. In fact, if you are not sure which colors to use, just keep a stronger color for the most important elements, such as "call to action" buttons. 

Never use black in your design. Black almost never appears in the real world so using it doesn't feel natural.

Because colours can convey emotion, carefully choose the right colors.
    - red: strength, passion, excitment. Brighter tones are more energetic while lighter tones are more powerful and elegant.
    - orange draws attention without being as over powering as red. Associated with cheerfulness, freidnlyness, courage and creativity. 
    - yellow is energetic and gives the feeling of happiness. It assoicates with curosity, brightness and intelligence.
    - green: harmony, nature, life, money and health. Can also have a balancing affect.
    - blue: patience, peace, trust-worthyness, and stability. This is one of the most beloved colors, especially by men. This is associated with profesisonalism, trust, and honour.
    - purple: power, nobility wisdom, luxury, mystery and wealth.
    - pink: romance, passivity, care, peace, affection, etc.
    - brown: relaxation, earthiness, nature, comfort, reliability and confidence. 


Section Differentation:

One nice trick is to use a very subtle background color in one section and leave surroundign sections with a white background.

    .section-steps {
        background-color: #f4f4f4;
    }

    

Working with Images
------------------------------

Image heavy web sites convert better. Here we learn how to put text over images. 

Putting text directly on an image only works if the image is dark and the text is light. Otherwise you do not have enough contrast between the text and the image. 

The most common solution is to overlay the image with a transparant color. Then place your text on the image. Black is the most common color but many options are available - use colors that make sense (see the section above). Color gradients are another option. Check out the course e-book. One is example is a gradient that moves in a horizontal direction:

    background: linear-gradient(to bottom right, #67b26f, #4ca2cd);
    height: 100vh;  /* need this so the background image does repeat */

The third option is to put some text in an opaque box somewhere in the image. Sometimes the box will be transparent. 

Another option is image blur. Blur the background image and then apply your text.Similarly, you can use an out of focus area to apply the text. In this way you help bring focus on the important parts of the image. The trick, however, is too keep the text position over all screen sizes.

One last idea is a floor fade. The bottom of the image fades to dark and the text is applied in this area.

Sometimes background-attachment: fixed; is nice for background images. Note that this may not work on iOS devices. Use background-attachment: scroll; instead. Alternatively, you could just ignore background-attachment: fixed;  altogether for smaller screen widths.

Here is an example of setting a full screen image within the header element holding a div of class=".hero-text-box". We want the header to sit nicely centered over a large, full screen backkground image.

    <header>
        <div class="hero-text-box">
            <h1>Goodbye junk food. Hello super healthy meals.</h1>
            <a href="#">I'm hungry</a>
            <a href="#">Show me more</a>
        </div>
    </header>


    header {
        background-image: linear-gradient(rgba(0, 0, 0, 0.7), rgba(0, 0, 0, 0.7)), url(./img/hero.jpg);
        background-size: cover;
        background-position: center;
        background-attachment: fixed; 
        height: 100vh;
    }

    .hero-text-box {
        position: absolute;
        width: 1140px;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
    }

header:

A height of 100vh means use 100% of the vertical height of the image. This along with a center position means that as the view port resizes so does the image. The background-size property also has a value of cover, otherwise you don't see the background image at all.

background-image essentially takes two arguments/images. The first is a linear gradient that transitions from one color to another (or a 2nd image url). We have it transition to the same thing (transparant black) so that it is all transparant black. This is what will give our text contrast with the background image.

The transform property in the hero-text-box allows us to readjust the absolute positioning into the center of the screen. The transform property applies a 2D or 3D transformation to an element. This property allows you to rotate, scale, move, skew, etc., elements.

A fixed value for background-attachment is a really nice feature. It fixes the image in place so that as you scroll the text moves over the image.


In this example we make a grid of images with transitions on darkness and scale:

    .meals-showcase {
        list-style: none;
        width: 100%;
    }

    .meals-showcase li {
        display: block;
        float: left;
        width: 25%; /* 4 images wide to give 100%*/
    }

    .meal-photo {
        width: 100%; /* 100% width of parent */
        margin: 0;  /* despite over- riding at the * rule, the normalise library over-rides it */
        overflow: hidden;  /* since we scale at 115% we need to tidy up overflow */
        background-color: black;  /* this mixed with opacity of 0.7 - see below - makes the images darker */
    }

    .meal-photo img {
        opacity: 0.7;  /* allows the parent's black background to darken the image*/
        width: 100%;
        height: auto;
        transform: scale(1.15);
        transition-duration: 0.5s;
    }

    .meal-photo img:hover {
        opacity: 1;
        transform: scale(1.03);  /* On mouseover images springs back into shape and lightens up*/
    }


You can use text-align for all inine and inline block elements, eg icons and images.


Working with Icons
--------------------------------------
Icons have a lot of power, but they can also cause confusion when poorly used.

Use them to show features of your website or products that you are selling. Or perhaps steps users must follow to reach some goal. You can also use icons for actions and links.

Rules:
    - Icons should be instantly recognisable
    - Label your icons.
    - Icons should not take center stage in your design. They play a supporting role.

Icons can be static images or vector fonts. Vector fonts scale smoothly when resized. Use fonts.

The ebook lists free icon sets.

Example:

    .icon-big {
        font-size: 350%;
        display: block;
        color: #e67e22;
        margin-bottom: 10px;
    }

So, like text, we can change the color of the icon with just the color attribute. Similarly, we can also make them bigger/smaller with font-size. A block display is also useful in this case. Forcing a line break often gives icons the proper space if they are over a paragraph. 

However in other cases you might have an icon sitting next to some text. You will also want to line the icon up with the text:


    <div class="city-feature">
        <i class="ion-ios-person icon-small"></i>
        1600+ happy eaters
    </div>

    .icon-small {
        display: inline-block; /* allows us to use the width property */
        width: 30px;
        text-align: center;
        color: #e67e22;
        font-size: 120%;
        margin-right: 10px;
        
        /* secrets to align text and icons*/
        line-height: 120%;
        vertical-align: middle;
        margin-top: -4px;  /*pull icons up*/
    }



Whitespace
--------------------------------------

Every piece of good design uses white space well. It creates a clean and simple look and feel, but also communicates how elements relate to each other. It is closely related to the idea of 'visual heirachy'; how your content is organised.  
    - Put whitespace between your elements
    - Put whitespace between groups of elements
    - Put whitespace between sections
    - But don't exaggerate; elements can lose their relationship.

To define your heirachy
    - Define where you want your audience to look first. 
    - Establish a flow that corresponds to your content's message.
    - Use whitespace to build that exact flow.



Define Your Project
------------------------------------------

- Define the goal of the Project, eg selling something, releasing a book, show what a company does and where it is located, have people sign up on a plan, etc.
- Define your audience -  the typical user, eg 'busy people who don't have time to cook or don't want to'.

- Define the nagviagtion and site structure
- After having a good think about the design, sketch your ideas before you start designing.
- Make many sketches but don't spend a long time making them perfect.
- Never start designing without an idea of what you want to build. Get inspiration.
- Once you have a sketch, use the tips above (color palate, font, whitespace, icons, videos, images, etc,) to further design. 
    - Start thinking about visual heirachy
    - This is the 'Content First' approach. Don't just fill a page with content, but consider the content first and design around it.
    - Define the navigation and site structure.
- Continue to design in the browser by adjusting HTML and CSS.
- Optimise performance and search engine response.
- After launch, monitor user behaviour and adjust your site as necessary.
- Update content regularly to show that this is a living site. One way to do this is blogs.



Responsive Web Design
-----------------------------------------
Web pages on any screen size should be easy to navigate. You should not have to zoom in and out to use features.

Google prioritises mobile friendly web pages in it's search results. Use this meta tag in the head element:

    <meta name="viewport" content="width=device-width, initial-scale=1.0">

The three main ingredients of responsive design are:

    - Fluid grid: all layout elements are sized in relative units, such as percentages, instead of absolute units like pixels.
    - Flexible images: are also sized in relative units
    - Media queries: alow us to specify different CSS style rules for different browser widths.

One option is to download "responsive grid system". Other options include bootstrap or wordpress. While it's useful to at least know how to use bootstrap, however the simpler responsive grid [or flexbox] is often enough.

Responsive is organised into rows and columns of a width relative to the browser window. If the screen becomes quite narrow the collumns stack. It's useful to set up some values for our rows:

    .row {
        max-width: 1140px;
        margin: 0 auto;
    }

(Be careful with any styles imported from this library. You have to override them.)


One area of interest is font-size. Say we have a global fon-size in px. Then, say for <h1> we might specify a percentage:

    h1 {
        font-size: 200%;
    }

Then should we change the global font-size change, then so will our h1 font size. Ie, the font size in this element is relative to the base size here:

    html {
        background-color: #ffffff;
        color: #555;
        font-family: 'Lato', 'Arial', sans-serif;
        font-size: 20px;
        font-weight: 300;
        text-rendering: optimizeLegibility;
    }

Using media queries, often used break points for screen width are:

    0px     - 480px: cellphone
            - 768px: tablets
    1024px  - <1200px: rotated tablet

These are based off more popular devices, but as you get more experience set them to suit what looks best at various sizes. Some examples:


    /* Small phones: from 0 to 480px */
    @media only screen and (max-width: 480px) { ... }

    /* Small phones to small tablets: from 481px to 767px */
    @media only screen and (max-width: 767px) { ... }

    /* Small tablet to big tablet: from 768px to 1023px */
    @media only screen and (max-width: 1023px) { ... }

    /* Big tablet to 1200px (widths smaller than the 1140px row used in our project) */
    @media only screen and (max-width: 1200px) { ... }

So one way to do this is make your standard webapage and then go through, with an adjusted browser size, and add in properties to these rules. A number of the changed properties will include white space related design, such as margins, width and padding. This may involve overwriting col and row values from a library. Font size will often change as well. 

Another useful property relates to hiding the overflow. Sometimes the minimum width, as we have set it for larger screens, is wider than a smaller screen. In your html rule (ie not even in a media query, but for the entire doc as a default) set this:

    overflow-x: hidden;

Also, when using a grid system you can set the columns to 100%. This means that they will push each other done and line up vertically.

In smaller screen sizes you may also want to hide things like a navigation. 

    display: none;



Not all browsers implement CSS in the same way. CSS browser prefixes allow browser makers to support new CSS features. Each browser has a prefix:

    Android: -webkit-
    Chrome: -webkit-
    Firefox: -moz-
    Internet Explorer: -ms-
    iOS: -webkit-
    Opera: -o-
    Safari: -webkit-

This is how you would make, for example, the border radius property work on older verisons of browsers:

    -webkit-border-radius: 25px;
    -moz-border-radius: 25px;
    -o-border-radius: 25px;
    border-radius: 25px;

This is can be a bit boring to implement but auto-prefixing software does exist. The good ones will only prefix those properties that need it.

For barkwards compatability ou can also import some js from www.jsdelivr.com

    <script src="//cdn.jsdelivr.net/respond/1.4.2/respond.min.js"></script>
    <script src="//cdn.jsdelivr.net/html5shiv/3.7.2/html5shiv.min.js"></script>
    <script src="//cdn.jsdelivr.net/selectivizr/1.0.3b/selectivizr.min.js"></script>

You can also search out the compatability of individual properties at caniuse.com


There is an example of responsive design in the nav bar example section.




Quotes
---------------------------------------

Example of image (profile pic) next to the quote: (random profile pics are available from https://randomuser.me/)

    <blockquote>
        Inexpensive, healthy and great-tasting meals, delivered right to my home. We have lots of food delivery here in Lisbon, but no one comes even close to Omifood. Me and my family are so in love!
        <cite><img src="resources/img/customer-2.jpg">Joana Silva</cite>
    </blockquote>

    blockquote:before {
        content: "\201C";  /* search for glyphs or ISO*/
        font-size: 500%;
        display: block;
        position: absolute;
        top: -5px;
        left: -5px;
    }

    cite {
        font-size: 90%;
        margin-top: 25px;
        display: block;
    }    

    cite img {
        height: 45px;
        border-radius: 50%;
        margin-right: 10px;
        vertical-align: middle;
    }

We use a psuedo selector here to put a nice quote mark. It's also adjusted into the negative so that it looks like the quote is indented. 




Forms
---------------------------------------------


Since the input element is often used we can distnguish by type:

    .contact-form {
        width: 60%;
        margin: 0 auto;
    }

    input[type=text],
    input[type=email],
    select,
    textarea {
        width: 100%;
        padding: 7px;
        border-radius: 3px;
        border: 1px solid #ccc;
    }

    textarea {
        height: 100px;
    }

    input[type=checkbox] {
        margin: 10px 5px 10px 0;
    }

    *:focus {outline: none;}

We also see another psuedo selector here for focus. Some of these input have annoying borders so we remove them.


PHP Example - email generated from form
---------------------------------------

First, this really won't work on your local build. You need to have your site hosted. 

Say we have a script on our server called mailer.php. It will send emails. It looks like this:


<?php

    // Get the form fields, removes html tags and whitespace.
    $name = strip_tags(trim($_POST["name"]));
    $name = str_replace(array("\r","\n"),array(" "," "),$name);
    $email = filter_var(trim($_POST["email"]), FILTER_SANITIZE_EMAIL);
    $message = trim($_POST["message"]);

    // Check the data. If it is not correct the user is redirected to a webpage with failure code argument of -1. We will
    // handle this error later. The script then executes.
    
    if (empty($name) OR empty($message) OR !filter_var($email, FILTER_VALIDATE_EMAIL)) {
        header("Location: http://www.webdesigncourse.co/omnifood/index.php?success=-1#form");
        exit;
    }

    // Set the recipient email address. Update this to YOUR desired email address.
    $recipient = "<YOUR EMAIL HERE>";

    // Set the email subject.
    $subject = "New contact from $name";

    // Build the email content.
    $email_content = "Name: $name\n";
    $email_content .= "Email: $email\n\n";
    $email_content .= "Message:\n$message\n";

    // Build the email headers. Not visible to the user but is part of every email
    $email_headers = "From: $name <$email>";

    // Take the above variables and send the email.
    mail($recipient, $subject, $email_content, $email_headers);
    
    // IN teh successful case we redirect to an element with id="form" in index.html page with success code 1.
    header("Location: http://www.webdesigncourse.co/omnifood/index.php?success=1#form");

?>


So in our form elements we now include an action:

    <form method="post" action="mailer.php" class="contact-form">

This script will now be executed when a use clicks on a submit button. 

We include our messages in the html doc, but within a php tag:


    <div class="row">
        <?php

            if($_GET['success'] == 1) {
                echo "<div class=\"form-messages success\">Thank you!. Your message has been sent.</div>"
            }
            
            if($_GET['success'] == -1) {
                echo "<div class=\"form-messages error\">Oops! Something went wrong. Please try again.</div>"
            }
        >

    </div>    

This will cause a linting error. We actually have to rename index.html to index.php 


Some suggested styling might be green and red backgrounds:

    .success {
        background-color: rgba(38, 191, 68, 0.8);
    }

    .error {
        background-color: rgba(209, 46, 46, 0.8);
    }




Footers
--------------------------------------


In this example we see a nice darker background color that contrasts well with the preceeding section that was in white.

There are also two navigation groups. Neither is the default bullet points and borders. We display them inline-block so they move across the page. 

When a user hovers over the social media icons, that icon color changes to it's associated social media color. To get the latest colors go to https://www.lockedownseo.com/social-media-colors/ . They also have a shared 0.2s transition.


    footer {
        background-color: #333;
        padding: 50px;
        font-size: 80%;
    }

    .footer-nav {
        list-style: none;
        float: left;
    }

    .social-links {
        list-style: none;
        float: right;
    }

    .footer-nav li,
    .social-links li {
        display: inline-block;
        margin-right: 20px;
    }

    .footer-nav li:last-child,
    .social-links li:last-child {
        margin-right: 0;
    }

    .footer-nav li a:link,
    .footer-nav li a:visited, 
    .social-links li a:link,
    .social-links li a:visited {
        text-decoration: none;
        border: 0;
        color: #888;
        -webkit-transition: color 0.2s;
        transition: color 0.2s;
    }

    .footer-nav li a:hover,
    .footer-nav li a:active {
        color: #ddd;
    }

    .social-links li a:link,
    .social-links li a:visited {
        font-size: 160%;
    }

    .ion-social-facebook,
    .ion-social-twitter,
    .ion-social-googleplus,
    .ion-social-instagram {
        -webkit-transition: color 0.2s;
        transition: color 0.2s;
    }

    .ion-social-facebook:hover {
        color: #3b5998;
    }

    .ion-social-twitter:hover {
        color: #00aced;
    }

    .ion-social-googleplus:hover {
        color: #dd4b39;
    }

    .ion-social-instagram:hover {
        color: #517fa4;
    }

    footer p {
        color: #888;
        text-align: center;
        margin-top: 20px;
    }


Favicons
---------------------------------------

Favicons are the small icons you see on broswer tabs and bookmarks. They help users identify your website. See https://realfavicongenerator.net/ for a tool.

Once you upload the image the tool will give you various options, such as adding a background color. A bunch of link elements are generated, which you add into your HTML file alongside all the other links.





Maps
--------------------------------------

This can be done with jQuery pluging called gmaps.js. Download the jQuery file from https://hpneo.github.io/gmaps/

Use the examples on that page to see what goes into the object passed in as an argument.

Eg, for a basic map paste this into your jQuery file:

    new GMaps({
        div: '.map',
        lat: -12.043333,
        lng: -77.028333
    });

(.map is an example classname you have chosen)

You also need to add the official google maps API via a script tags:

  <script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.6.4/jquery.min.js"></script>
  <script type="text/javascript" src="http://maps.google.com/maps/api/js?sensor=true"></script>
  <script type="text/javascript" src="../gmaps.js"></script>

If you need specific co-ordinates you can go to google maps and copy the numbers that appear in the URL. Supply a non-default zoom level can also be helpful. The default value is 15. 

So if I want to zoom into a central Dunedin I seach out "Dunedin" in google maps. The URL is:

https://www.google.co.nz/maps/place/Dunedin/@-45.8726082,170.3870355,11z/data=!3m1!4b1!4m5!3m4!1s0xa82be4e00f5f513d:0x500ef8684799941!8m2!3d-45.8787605!4d170.5027976

    var map = new GMaps({
        div: '.map',
        lat: -45.872608,
        lng: -170.3870355
        zoom: 12
    });

And then I can add in a marker at that location

    map.addMarker({
        lat: -45.872608,
        lng: -170.3870355
        title: 'Bob Burgers',
        infoWindow: {
        content: '<p>HTML Content</p>'
        }
    });





Website Optimisation
---------------------------------------

Page speed relates to user engagement. 

1. Optimise heavy images

If you inspect an image with the dev tools you will see it's actual size and the size being displayed on the website. Just hover your mouse of the element in the elemetns tab. Usually there is quite a difference is sizing. However, we do want the image size to be twice that of the diplayed size. Hi res displays need larger file so that they appear sharp. Eg, is the image is 361 x 240 pixels in the dev tools, then we'll round up to 375 and double that to get 750px as a target. We can reduce the image to this dimension width.

You can use https://imagecompressor.com/ to compress large images.



2. Minify CSS and jQuery Code

This optimises code to make it load faster. All whitespace and commments are removed. This does make it difficult to read the code so only do this when you are ready to launch the site. Check out

http://www.minifycss.com/css-compressor/





Search Engine Optimisation
--------------------------------------

meta description tags help with the display of results on a search engine results page. It's a good way to advertise your site. You want no more that 160 characters. 

    <meta name="description" content="Omnifood is a premium food delivery service with the mission of bringing affordable and heathy meals to all" >

It's good ot declare the character encoding but this this does not affect ranking

    <meta charset="utf-8">

Always use valid HTML coding rules. In additional to being better read by search engines and browsers, it also looks more professional, readible and accesible. Copy your entire HTML file and paste it into https://validator.w3.org/ .

Content is king. You must have great content in your website. A top ranked website is useless if no one likes the content. Also, keep updating the content so that people will keep coming back. 

Keywords spread throughout the text are very important for SEO. These are the words that users will enter into a search. Although, don't overuse keywords. Search engines penalise websites that keyword spam. Us keywords in the title, the meta description tag, and inheadings and links.

Backlinks are very valuable too. Have other websites link back to you. These are like a recomdation of your website. 

More SEO is in the course e-book.




Launch a Website
-----------------------------------------

1. Choose and buy a domain name
2. Buy web hosting (some services like GoDaddy does this and the last step)
3. Upload website - often need to so this via an FTP service. You can usually get the server and user name from the hosting service.

Brackets works well here. Once you have FTP set up, each time you upload only changes are sent through.




Site Maintenance
----------------------------------------

Use Google Analytics to:

- Keep track of your website's success
- Monitor your user's behaviour

Vary your site to make improvements to this success.

Once you log in you can create a tracking ID for each website. This generates a script that you can add to your scripts section. If you have multiple pages you need to add the script in each page.



Improving Website Conversion Rate 
--------------------------------------------

- Offer free gifts to build trust. If users like the gift they are more lkley to buy from you
- Use string call to action buttons. And use the same buttong in several places on your site (but without spamming)
- If you have a sign up form make sure people can see it. Use a pop up box. They are annoying but successful.
- Around a call to action or sign up area make sure you explain the benefits of of clicking or supplying details - eg free for 30 days
- If a user is signing up, don't ask for more information than you need. Name and email is often enough.
- Customer testimonials is very effective, and so are the logos of other companies that use your product or service. Customers are more like to trust others than they trust you.
- Create urgency. People are more likely to act. Ideas include limited time specials, and using words like 'hurry', 'now', 'immediately' and 'instant' in your call to action buttons. 
- Create scarcity. When we feel like there is less of anything we value it more. For example Amazon does this well with "Only 1 left in stock".




