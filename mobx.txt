The basic question MobX tries to answer is how we can keep the state consistent/synchonized with the UI. 

Two functions from Mobx demonstrate the solution. Let's say we have a counter with `count` as the state, which is displayed in the UI:

   export class Counter extends React.Component {
   
      count = 0;
      // ...
      <button>{this.count}</button> 
   
Using the observable function tells MobX to track a value. Any component that uses that value is decorated with the observer function. Using `@abserver` tells MobX that this component's rendering can be derived from the relevant observables. This separates the state and the component that reacts to that state.
 
Now we don't even need to have the state in the react component:
   
 const appState: IAppState = observable({
    count: 0
});


@observer
export class Counter extends React.Component {

   // @observable count = 0;  // if we did not want to pull out the state, as we have above

    render() {
        return (
            <div>
                <div data-testid="count">{appState.count}</div> // no need to reference any props
            </div>
        )
    }
}
 
 
MobX is built around four key concepts:
 - actions
 - observable state
 - computed values
 - reactions
 
And one very important principle is that we should use the smallest amount of state and derive all else from that state.

Derivations form the backbone of MobX and come in two flavors: computed values are values that can be derived from the state automatically. And reactions can be used to manage side effects, such as drawing the user interface.
 
We decorate computed derivations with @computed. This tells MobX that such properties can be completely derived from observables. 
 
Computed values are not allowed to create side-effects, such as changing state (or even logging statements). They should be pure functions of observables or other computed values. This is because MobX must be left to determine the best time update item, which then allows millions of computed values to live in memory and yet they don't have to be constantly updated. Computed values are suspended if not needed.
 
Here we see an example of our important principle. Because we only have one temperature type in state, and compute the rest, then we need less work to update the 'state' (observables + computeds):
 
export class TemperatureModel {
    @observable unit: Unit = 'C';
    @observable cTemp = 25;

    @computed get kTemp() {
        console.log('Calculating Kelvin');  // side effect: only here for demo purposes
        return this.cTemp + 273.15;
    }

    @computed get fTemp() {
        console.log('Calculating fahrenheit');  // side effect: only here for demo purposes
        return this.cTemp * (9/5) + 32;
    }

    @computed get temp() {
        console.log('Calculating temperature');  // side effect: only here for demo purposes
        switch(this.unit) {
            case 'K': 
                return this.kTemp + ' \u00B0K';
            case 'F': 
                return this.fTemp + ' \u00B0F';
            case 'C': 
                return this.cTemp + ' \u00B0C';
            default:
                return NaN;
        }
    }

    setUnit(unit: Unit) {
        this.unit = unit;
    }
}

This model is consumed in a component:

@observer                           // necessary for changes in the computed value of temp to be picked up.
export class Temperature extends React.Component {

    tempModel = new TemperatureModel();

    render() {
        return (
            <div>
                <span>{this.tempModel.temp}</span>
                <br/>
                <button onClick={() => this.tempModel.setUnit('C')}>C</button>
                <button onClick={() => this.tempModel.setUnit('K')}>K</button>
                <button onClick={() => this.tempModel.setUnit('F')}>F</button>
            </div>
        )
    }
}

 
The computations are only triggered when we inspect a computed value. By default MobX does not try and keep computed values up to date. It instead tries to defer calculations under they are need by IO or side effects. To make computed values react to the state we have to consume them in a Mobx reaction.

So in the above example we see 'Calculating temperature' when the app first starts. If we change units, with setUnit, only then is the relevant ftemp or ktemp calucated via get temp(), eg 'Calculating Kelvin'.
 
Reactions do not produce a value. Instead they reactivly trigger a side effect. An observer is an example of a reaction. It's associated side effect is pushing a render to the DOM.



Observable objects, arrays, and maps to store state
---------------------------------------------------------

The observable decorator creates a new getter and setter for each key value pair in the decorated object. And, you don't need classes either. An object literal works as well. If you pass in functions without arguments then these are assumed to be computed:

   const t = observable({
      unit: 'C',                          // observable
      tempCels = 25,                      // observable
      tempK: function() {                 // computed
         return this.tempCels + 273.15
      }
   })

You can observable arrays that respect the normal array API.

   const temps = observable([]);
   temps.push(new Temperature());

You can always slice them if you need a regular array for some other library.

Observable maps are available is you need a dymanically keyed collection:

   const temps = observable(asMap({
      'Amseterdam': new Temperature(),
      'Rome': new Temperature()
   }))

Like a map, you can iterate over entries to create JSX elements:

     const InternationalTemp = [...this.tempModel.worldTemps.entries()].map(
         ([city, t]: [string, TemperatureModel], index) => <div key={index}>{city}: {t.temp}</div>
     );
   
While it's not often used you can also make primitive observables. However, since primitives are immutable, they are not really primitive observables. They are reference (or 'boxed') values with setters and getters attached.   
   
    boxed = observable(42);
    boxed.set(43);
    boxed.get();  // 43
  
  
  
  
   
//////////////////////////////////////////////////////   

class Thing {
   @observable
   state: number;

   @computed
   get multiplied() {
      return this.state * this.otherState;
   }

   @action
   doThing() {
       this.state = 0;
        
       await blah();
       
       this.otherState = 1;
   }

}

Any instance of a Thing will have a member/property called 'state'. If state changes there may be a redraw.
If there is an observable inside a method decorated with @computed, as there is here with multiplied(), then if multiplied() is called within a render method a redraw will occur. 
doThing() also causes a redraw. Everything inside is normally batched up so that the system does not get to complicated. However be careful when using an await. If you do use like above , eveything up to inlcuding the await is batched up but then every thing else is actioned independantly. This is caused by an internal function, runInAction(), only including up to the await. It looks like this:

   @action
   doThing() {
      runInAction(() => {
         // modify observable
         this.state = 0;
         
         await blah();
      });

      this.otherState = 1;
   }

//////////////////////////////////////////////////////////

