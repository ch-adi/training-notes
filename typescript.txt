**********************************************************************************


                        TypeScript


**********************************************************************************

playgound: https://www.typescriptlang.org/play/index.html

compiling: $ tsc script.ts, will, by default, create script.js in the same directory



Types 
--------------------------------

In addition to all the regular es6 types, TypeScript also includes tuples, enums and any.


Tuples

In TS tuples are arrays with mixed types and a limited number of items. 

For example I might have a normal array for my address:

    let address = [145, "Good Street"];

The compiler will treat this as an array of type 'any'. I.e. :

    let address: any[] = [145, "Good Street"];

However, to make it a tuple we can declare like this:

    let address: [number, string] = [145, "Good Street"];

Then if we re assigned with the number and string reversed we would get an error:

    address = ["Good Street", 145];  // TS error


Enums

Enums make numbers more expressive by encoding numbers into user friendly forms. 

    enum Color {
        Grey,  // 0
        Green,  // 1
        Blue    // 2
    }

    let myColor: Color = Color.Green;
    console.log(myColor); // 1
    
You can also assign specific numbers to enum values.


any

This type gives up all the features and advantages of TypeScript. So it should only be used sparingly. 

    let car: any = "BMW";  // any allows us to change to a different type
    console.log(car);
    car = { brand: "BMW", series: 3};  // change to object
    console.log(car);


nullable types

For example we might want the flexibiliy to clear a value:

    let canBeNull = 12;
    // later on
    canBeBull = null;

You can configure TS so that you can define which variables should never be null and which variables can be null.

Within tsconfig.json add the following into compiler options (this is false by default).

    "strictNullChecks": true

The above code snippit would now produce an error: type 'null' is not assignable to type 'number'. However, if you first declare the variable and then assign null no error will appear:

    let canAlsoBeNull;
    canAlsoBeNull = null; // no error


To make the first example work we would have to specifiy null within a union type:

    let canBeNull: number | null = 12;
    canBeBull = null;

Also note that if you first assign null to a variable, TS will not automatically widen the set of allowed types beyond null. 

    let canBeAny =  null;
    canBeAny = 12 // error: type 'number' is not assignable to type 'null'.


Type assertions (aka cast):

This is a way to tell TS an expression's type when you know better than the type checker. 

    document.getElementById('root') as HTMLElement

The reason we need to do so in this case is that getElementById's return type is HTMLElement | null. Put simply, getElementById returns null when it can't find an element with a given id. We're assuming that getElementById will actually succeed, so we need to convince TypeScript of that using the as syntax.

TypeScript also has a trailing "bang" syntax (!), which removes null and undefined from the prior expression. So we could have written document.getElementById('root')!, but in this case we wanted to be a bit more explicit.



Functions
--------------------------------------------

Functions that return nothing use 'void'.

    function sayHello(): void {
        console.log("hello!");
    }

Functions are types on their own. 

    function multiply(value1: number, value2: number): number {
        return value1 * value2;
    }

    let myMultiply: (val1: number, val2: number) => number;
    myMultiply = multiply;
    console.log(myMultiply(5,2));


There is a difference between a function that returns nothing (void) and those that will never return anything. In the latter case the inferred return type is 'never'.

    function neverReturns(): never {
        throw new Error('An error');  // always stops and throws an error so never returns anything.
    }

We can combine tuples and the rest operator. These two functions are equivalent:

    function printInfo(name: string, age: number) {
        console.log('My name is ' + name + ' and I am ' + age + ' years old!');
    }

    function printInfo(...info: [string, number]) {
        console.log('My name is ' + info[0] + ' and I am ' + info[1] + ' years old!');
    }




Objects
-----------------------------------------

Object will be automatically turned into a type. However it is not just the type of each value is important but also property names.

    let userData = {
        name: "max",
        age: 27
    }

    userData = {}  // error: type {} is not assignable to type {name: string, age: number}

    userData = {
        a: "hello",
        b: 22
    }  // error: 'a' does not exist in type {name: string, age: number}


This is unlike the function case where only the order of the types of the argument values are important. In an object the order is not clear, so the property names step up and provide an indication of structure.

Explicitly providing the type definition:

    userData: {name: string, age: number} = {
        a: "hello",
        b: 22
    }


A 'type alias' is something we assign a type to so that we can resuse it as a custom type.

type Complex = {data: number[], output: (all:boolean) => number[]}

The type keyword tells the TS compiler to create a type and assign to the type alias.



Union Types
------------------------------------------

For flexibily we can use a single pipe operator.



Compiler

--------------------------------------------

The default behaviour of the compiler is to warn but then go on and transpile to JS.

running $ tsc --init creates a tsconfig.file. Inside this file you'll see various options.

    modules -  the format you with wish to resolve your modules
    target - the target version of JS, eg es6. es5 is the default because it runs in more browsers.


Anyway, to stop transpilation on an error use this option:

    "noEmitOnError": true,


If the sourceMap option is true the compiler will make a .map file next to the .js file. This allows the associated ts file to be used in the dev tools, including debugging with break points.

    "sourceMap": true

If you set noImplicitAny to true then you wont get away with loose variable declarations:

    let anything; // error: variable 'anything' implicitily has an 'any' type.


You can also chain compiler options into your tsc call with double hyphen

    $ tsc --noImplicitAny

You might also consider noUnusedParameters and strictNullChecks to write cleaner code. noUnusedParameters will not allow you to specify parameter for a function that are not used. strictNullChecks will not allow you to return a value that has only been declared and not initialised. For example you might not have considered all branches in a function.

    function controlMe(isTrue: boolean) {
        let result: number;
        if (isTrue) {
            resuult = 12;
        }
        return result; // strictNullChecks will complain about this undefined value being return.
    }



Classes
---------------------------------------

In TS you can create class properties just by listing them out in the class body. You don't need to put them in a constructor with the 'this' keyword.

class Person {
    name: string  // the default accessibility is public i.e. this is 'public name: string'
    private type: string; 
    protected age: number ; // not public but accessible from classes that inherit from this class (child classes)

    // if you do need to assign some arguments to properties then use the constructor
    // the 2nd argument here is shortcut way of creating a property
    contructor(name: string, public userName: string) {
        this.name = name; // this.name is the property and name (RHS) is the argument passed in
    }

    // using methods to access to private properties
    printAge() {
        console.log(this.age);
    }
    setType(type: string) {
        this.type = type;
        console.log(this.type);
    }

}

Class are used by instantiating them, which creates an object. 

    const person = new Person('Max', 'max');

Use the extends keyword to inherit from a class (In the past we would have used object.create() to use one object as the prototype of another).

    class Max extends Person {
        name = "Max";
    }

    const person = new Person('Anna', 'max'); // need both arguments to satisfy the constructor in the parent class
    console.log(person.name);  // Max - the name we supplied in the child overrides the parent's property

While this case show's a property override, the normal case is to call the parent's constructor with super:

    class Max extends Person {
        
        constructor(userName: string) {
            super('Max', userName);
            this.age = 31; 
        }
    }

You can also make methods private and public.

// getters and setters

These allow you to run some code before getting or setting a value.

Let's say we want to set a species but it must have at least three characters.

    class Plant {
        private _species: string = "default";

        get species() {
            return this._species;
        }

        set species(value: string) {
            if(value.length > 3) {
                this._species = value;
            } else {
                this.species = "default";
            }
        }
    }

In the past setter and getters would have looked like this:

    var person = {
        _firstName: ""
    };
    Object.defineProperty(person, "firstName", {
        get: function () {
            return this._firstName;
        },
        set: function (value) {
            if (value.length > 3) {
                this._firstName = value;
            }
            else {
                this._firstName = "";
            }
        },
        enumerable: true,
        configurable: true
    });



Static Properties and methods

    class Helpers {
        static PI: number = 3.14;

        static calcCircumference( diameter: number): number {
            return this.PI * diameter;
        }
    }

    // now works without the instantiation of an object from the class 
    console.log(2 * Helpers.PI);
    console.log(Helpers.calcCircumference(8));


Abstract Classes

Abstract classes cannot be instantiated directly. You must always inherit from them. This may be useful when you need a class to provide a basic set up for other classes to inherit from, but is too basic to be used on it's own.

You can also create abstract methods. These do not have curly braces, aka a function body. 

    abstract class Project {
        projectName: string = "default";
        budget: number = 1000;

        // once you extend this class you are required to implement this method
        abstract changeName(name: string): void;

        calcBudget() {
            return this.budget * 2;
        }
    }


Private Constructors and Singletons

class OnlyOne {
    // static yet private
    private static instance: OnlyOne;
    
    // private constructor: can't instantiate from outside the class declaration
    private constructor(public name: string) {}
    
    static getInstance() {
        if(!OnlyOne.instance) {
            OnlyOne.instance = new OnlyOne('The Only One');
        }
        return OnlyOne.instance;
    }
}

// Error: Constructor of class 'OnlyOne' is private and only accessible within the class declaration.
//let wrong = new OnlyOne('The Only One');

// Checks if we have an instance. If not, this creates an instance.
let right = OnlyOne.getInstance();
console.log(right);  // Object { name: "The Only One" }
right = OnlyOne.getInstance();
console.log(right); // Object { name: "The Only One" }



Readonly properties

In the above example we could still change the property 'name'. 

    right.name = "something else";

If you only supply a getter and not a setter, then the property is read only. A short cut is to specify the 'readonly' keyword in the property declaration. 

    private constructor(public readonly name: string) {}



Namespaces and Modules
------------------------------------------

In more complicated projects we need to break up our files. TS supports modular code with two key concepts; namespaces and modules. 

Namespaces allow us to group related code, and also avoid the duplication of names (naming collisions). They look a little like a JS object. Here we group some math-related code together, and in doing so pull it out of the global scope (less global scope pollution).

    namespace MyMath {
        const PI = 3.142;
        
        export function calcCirc(diam: number): number {
            return diam * PI;
        }

        export function calcRecArea(width: number, height: number): number {
            return width * height;
        }
    }

    const PI = 3.1419; // no redeclaration error
    console.log(MyMath.calcRecArea(10,20));

Namespaces with the same name are automatically combined. For example you might split the above MyMath namespace into two files. Logically it might make sense to break up into rectangular functions and circle functions. As long as you import both files then any code reliant on this namespace will continue to work. 

This is, however, cumbersome. The compiler can bundle these two files into one file. Use the $tsc --outFile command, specifying the file you want to bundle together. EG, if my main js file is app.js, then:

    $ tsc --outFile app.js circleMath.ts rectangleMath.ts app.ts

You will then only need to import app.js into your webpage in script tags. 

Another to import namespace files directly into a .ts file is to a triple slash. Eg at the top of app.ts add:

    /// <reference path="circleMath.ts" />
    /// <reference path="rectangleMath.ts" />

if you run tsc then these files will be compiled into app.js in the order yo have supplied them.

    $ tsc app.ts --outFile app.js

You can place a namespace wihtin a namespace. Like other members of the namespace, the inner namespace needs to be exported.


    namespace MyMath {

        namespace Circle {
            export function calcCirc(diam: number): number {
                return diam * PI;
            }
        }
        const PI = 3.142;

        export function calcRecArea(width: number, height: number): number {
            return width * height;
        }
    }

To now use calcCirc we would have to use MyMath.Circle.calcCirc. Or, after importing the MyMath namespace we could just create an alias for the Cirlce namespace:

    import CircleMath = MyMath.Cirlce;

Namespaces tend to be less declarative about dependcies, so tend to be used on smaller projects. In larger projects modules are often used.

For TS modules just place the export keyword at the beginning of a declaration. Then import the file:

    import { thing } from './thingsFile'; // no curly braces if a default: you also get to supply an alias

Leave out the .ts in the relative path.

While the TS compiler can be set to use a variety of module systems (commonJS, AMD, es6) we need need a module loader. Sysetem.js is one such loader.

    npm install --save systemjs@0.21.5

A module loader provides the logic to deal with the commands that the module systems use. Eg, a browser will not understand keywords like require or export, as used in CommonJS/nodejs. 

In index.html replace this line in the head:

    <script src="app.js"></script>

with

    <script src="node_modules/systemjs/dist/system.js"></script>

And at this script tag in the body:



{

Summary from https://auth0.com/blog/javascript-module-systems-showdown/ :

So within tsconfig compiler options there is the "module" property. This refers to module system, which organises dependencies and prevents naming collisions. As JS has become more comlicated there have been various module systems have been developed, such as commonJS, AMD, ES2015. Originally, in client side JS development, the developer, had to make sure all the dependencies are available and in the correct order. This would mean lots of script tags in the correct order.  

Another old pattern was the Revealing Module Pattern:

    var myRevealingModule = (function () {
        var privateVar = "Ben Cherry",
            publicVar = "Hey there!";

        function privateFunction() {
            console.log( "Name:" + privateVar );
        }

        function publicSetName( strName ) {
            privateVar = strName;
        }

        function publicGetName() {
            privateFunction();
        }

        // Reveal public pointers to
        // private functions and properties
        return {
            setName: publicSetName,
            greeting: publicVar,
            getName: publicGetName
        };
    })();

    myRevealingModule.setName( "Paul Kinlan" );


This pattern relies on bindings being declared within functions to encapsulate private contents. That is, declarations are are protected by the function scope enclosing them. You can also seen that public symbols are exposed in the returned dictionary. 

Overall this pattern deals with encapsulation but not so well with dependancy management.

CommonJS was a project to address modules. While it was not adopted by node.js, both systems are similar. Both use a require function. The parameter passed to require is the id of the module. In Node's implementation, it is the name of the module inside the node_modules directory. 

Both systems also use exports as a special object: anything put in it will get exported as a public element. 

However, in Node, module.exports is the special object that gets exported, while exports is just a variable that gets bound by default to module.exports. CommonJS, on the other hand, has no module.exports object. So, for node you must use module.exports. 

Two popular commonJS options are webpack and browserfy. A downside with much of these systems are synchronous behaviour, which is bad in a browser. 

Async loading was addressed in a break away from commonJS: Asynchronous Module Definition (AMD). To common implementations are require.js and Dojo. Asynchronous loading is made possible by using JavaScript's traditional closure idiom: a function is called when the requested modules are finished loading. 

In ES2015 (es6) async and sync module loading was addressed. 

    //------ lib.js ------
    export const sqrt = Math.sqrt;
    export function square(x) {
        return x * x;
    }
    export function diag(x, y) {
        return sqrt(square(x) + square(y));
    }

    //------ main.js ------
    import { square, diag } from 'lib';
    console.log(square(11)); // 121
    console.log(diag(4, 3)); // 5

The static nature of the import and export directive allows static analyzers to build a full tree of dependencies without running code. In truth, ES2015 only specifies the syntax for static module loaders. In practice, ES2015 implementations are not required to do anything after parsing these directives. Module loaders such as System.js are still required. A new specification is being considered.

Also this system is lacking native support in many browsers and node. Transpilers like Babel are needed.

system.js is a one stop system for handing all these other module systems, transpilers, and environments.

    <script src="system.js"></script>
    <script>
      // set our baseURL reference path
      System.config({
        baseURL: '/app',
        // or 'traceur' or 'typescript'
        transpiler: 'babel',
        // or traceurOptions or typescriptOptions
        babelOptions: {

        }
      });

      // loads /app/main.js
      System.import('main.js');
    </script>

As System.js does all the job on-the-fly, using ES2015 modules should generally be left to a transpiler during the build step in production mode. When not in production mode, System.js can call the transpiler for you, providing seamless transition between production and debugging environments.

}




Contract Work with Interfaces
--------------------------------------------
 
An interface is kind of like a contract signed by an object in which is guarantees to be of a certain set of properties.  

If you pass an object literal into a function it is checked much more strictly than if you passed a previously defined object.

Optional properties have a question mark and if you don't know the name of the property in advance use square brackets to denote a flexible key name.

    interface NamedPerson {
        firstName: string;
        greet: (lastName: string): void;
        age?: number;
        [propName: string]: any;  // we don't know the name of the key or the type yet.
    }

The implements key word is used by a class to implement an interface.

    class Person implements NamedPerson { .... }

If you want to specify type for a function use a function interface:

    interface DoubleValueFunc {
        (number1: number, number2: number): number
    }
    
    let myDoubleFunc: DoubleValueFunc;
    
    myDoubleFunc = function(val1: number, val2: number) {
        return val1 * val2;
    };


Interfaces can also inherit. Say we want an aged person to have all the named person properties but we also want to make the optional age property a requirement:

    interface AgedPerson extends NamedPerson {
        age: number;
    }

Interfaces are only there to check code during compliation. They are totally removed when the code is transformed to js. 


Generics
----------------------------------------

Generics, or generalising the type, allows you to use dynamic and flexible code and yet still be able to check the type,

    function echo<T>(data: T) { return data;}

    console.log(echo("max").length) // autocomplete works for length; length is a property for strings
    console.log(echo<string>("max").length) // more explicit version
    console.log(echo(27).length) // IDE and TS compiler both complain about length 

All members of an Array can be of one type:

    const testResults: Array<number> = [1.94, 2.33];


Generic array arguments:

    function printAll<T>(args: T[]) {
        args.forEach(
            //...
        )
    }

Generic types:

    const echo2: <T>(data: T) => T = echo;  // everything after the colon but before = is the declared type.

Generic classes:

This code will still cause a compiler error:

    class SimpleMath<T> {
        baseValue: T;
        multiplyValue: T;
        calculate(): number {
            return this.baseValue * this.multiplyValue;
        }
    }

    const simpleMath = new SimpleMath();
    simpleMath.baseValue = 10;
    simpleMath.multiplyValue = 20;
    console.log(simpleMath.calculate());

This is because even though the values we have chosen would work well in caclulate and produce a number, the compiler will complain that types other than number could also be passed in.

(you can override/coerce with plus symbols: return +this.baseValue * +this.multiplyValue; )

The above class will work better if we use the extends keyword. This contrains the generic types allowed. 

    class SimpleMath<T extends number | string> {
        baseValue: T;
        multiplyValue: T;
        calculate(): number {
            return this.baseValue * this.multiplyValue;
        }
    }

    const simpleMath = new SimpleMath<number>();
    simpleMath.baseValue = 10;
    simpleMath.multiplyValue = 20;
    console.log(simpleMath.calculate());


What is we wanted more than one generic type for one object? Eg, say we wanted, in the above example, one value to be a string and the other to be a number.

If both values must be the same type then:

    class SimpleMath<T extends U, U extends number | string> {
        baseValue: T;
        multiplyValue: U;
        // ...
    }

Or to mix the types:

    class SimpleMath<T extends number | string, U extends number | string> {
        baseValue: T;
        multiplyValue: U;
        // ...
    }


(T and U are just conventions. You can use anything you like).

Example: recreating a map using a two dimensional array:


    class MyMap<T> {

        private mapArray: (string | T)[][] = [];

        setItem(key: string, item: T) {
            const entry = [key, item];
            this.mapArray.push(entry);
        }

        getItem(key: string) {
            return this.mapArray.find( (element) => element[0] === key );
        }

        clear() {
            this.mapArray = [];
        }

        printMap() {
            this.mapArray.forEach(
                element => console.log(element[0], element[1])
            );
        }
    }

    const numberMap = new MyMap<number>();
    numberMap.setItem('apples', 5);
    numberMap.setItem('bananas', 10);
    numberMap.printMap();
    
    const stringMap = new MyMap<string>();
    stringMap.setItem('name', "Max");
    stringMap.setItem('age', "27");
    stringMap.printMap();

Another way of doing this is to have an object holding arrays, which would look like:

    private mapArray: {[key: string: T]} = {};    
    function logged(constructorFn: Function) {
        console.log(constructorFn);
    }



Decorators
--------------------------------------------------

Decorators are functions you can attach to classes, methods, and properties. Decorators then allow you to extend or modify these entities. It is a kind of meta programming. 

Decorators are basically functions. They get one argument from Typescript, which is mananged by Typescript. For a class decorator the argument you should expect for your decorator function is the constructor function for an object (i.e. what you are really are dealing with behind the syntactic sugar of class syntax). 

    function logged(constructorFn: Function) { 
        console.log(constructorFn); // logs out the constructor function without having to 'new up' a Person object
    }

    @logged
    class Person {
        constructor() {
            console.log('Hi');
        }
    }

We can also create decorator factory functions, which return back a decorator function after processing some other logic.

    function logging(value: boolean): ( Function | null) {
        return value ? logged : ()=>{}; // must always return a function rather than just null or undefined
    }

    // logging is not a decorator. We execute it and then a valid decorator is returned and 'attached'.
    @logging(true)
    class Car {
        constructor() {
            console.log('Hello from a car');
        }
    }


A more advanced example:

    function printable(constructorFn: Function) {
        constructorFn.prototype.print = function() {
            console.log(this);
        }
    }

    // multiple decorators attached
    @logging(true)
    @printable
    class Plant {
        name = "Green Plant"
    }

    const plant = new Plant();

    (<any>plant).print();  // forced to cast due to typescript bug

    // constructor function logged: 
    // class Plant {
    //    constructor() {
    //        this.name = "Green Plant";
    //    }
    // }

    // Object logged:
    // Plant {name: "Green Plant"}


Real world example:

In this example we take the strongest approach, which is a class based (instead of constructor based) decorator function. Of note is that a decorator is not allowed to change the API of an object. That means that the base class definition must already contain a public method of the correct name.

In the following decorator factory we specify that the base must already be of a certain type (ie so that we are not changing the base class API).  We see this after the extends keyword:  Constructor<IEventEmitter<TEventTypes>>> .


  interface IEventEmitter<TEventTypes = {}> {
     emit(event?: EventType | TEventTypes): void;
  }

  export function withHandleEvents<TEventTypes = {}>(eventHandler: (event: TEventTypes) => void) {
     return <TBase extends Constructor<IEventEmitter<TEventTypes>>>(Base: TBase) => {
        return class extends Base {
           emit(event: TEventTypes) {
              super.emit(event);            // invoke code in the base emit method, if any

              eventHandler(event);
           }
        };
     };
  }
  
And now follows a unit test that consumes this code. We see that the Emitter class already has an emit method. Therefore it's constructor does meet the type Constructor<IEventEmitter<TEventTypes>>>. And while it is only a stub in this case, we have made things easier for consumer should they want to have more than a stub. This specific code is called aboe by super.emit(). A simple example would be some logging that other decorated classes would not have implemented.
  
    describe('class mixin for connecting an emitter class to an event handler', () => {
     it('when the object emits, the connected handler is called', () => {
        const handler = jest.fn();

        @withHandleEvents<{ type: 'event'}>(handler)
        class Emitter implements IEventEmitter {
           emit(event: { type: 'event'}) {}             // empty stub 
        }

        const emitter = new Emitter;

        emitter.emit({ type: 'event' });

        expect(
           handler
        ).toBeCalledWith({ type: 'event'});
     });
  });


If we wanted to change the base class API we could do it by speicifying a return type for the decorator and also wrapping up the base class. However this is less type safe. We could passing in any old object into the decorator.

  export function withHandleEvents<TEventTypes = {}>(eventHandler: (event: TEventTypes) => void) {
     return <TBase extends Constructor>(Base: TBase): Constructor<IEventEmitter<TEventTypes>> => {      //now a return type
        return class extends Base {
           emit(event: TEventTypes) {
              //super.emit(event); // we no longer need the base to have the method
              eventHandler(event);
           }
        };
     };
  }
  
    //@withHandleEvents<{ type: 'event'}>(handler)
    const emitterWithHandleEvents = withHandleEvents<{ type: 'event'}>(handler)(
      class Emitter /*implements IEventEmitter*/ {    // does not have to be specified type
         //emit(event: { type: 'event'}) {}  // no longer needed
      });

    const emitter = new emitterWithHandleEvents();






Method and Property Decorators

Instead of taking a constructor function as an argument, this decorator function takes a method target (type 'any' since it could be a static method (resolved to the contructor function) or instantiated (resolves to the prototype of the object)), the name of the property (type string), and the descriptor (type PropertyDescriptor). A property descriptor comes out of vanila JS in that one way to add new properties in JS is to use Object.defineProperty(obj, prop, descriptor). The last argument in that signature allows for configuration the property with options like whether or not it is writable (see the MDN docs). 

Property decorators are different to method decorators. While you would think that they may be similar, TS cannot access properties in the same way it can access methods. That is, there is no property descriptor argument in the decorator's signature. However the function can return the property descriptor. This means that we can set the descriptor but we can't access the existing descriptor. 

In this example we want to add some meta data to a method, calcBudget, to make it non-overwritable. We do this with the editable, which return a mthod decorator.

We also demonstrate a property decorator. It's not very useful in the case (locks up the class), but if it was used on some other logic, lilke enumerability or configerablity of the property, then it might be fine. Often property decorators are better at listening to changes in a property. It can read values and react to changes. 

    // returns a method descriptor
    function editable(value: boolean) {
        return function(target: any, propName: string, descriptor: PropertyDescriptor) {
            descriptor.writable = value;
        }
    }

    // returns a property descriptor
    function overwritable(value: boolean) {
    return function(target: any, propName: string): any {
        target;
        propName;
        const newDescriptor: PropertyDescriptor = {
            writable: value
        }
        return newDescriptor;
    }
}

    class Project {
        //@overwritable(false)  // breaks the whole class since we can't write to this property in the constuctor
        projectName: string;

        constructor(name: string) {
            this.projectName = name;
        }

        @editable(false)
        calcBudget() {
            console.log(1000);
        }
    }

    const project = new Project("Super Project");
    project.calcBudget();  // 1000
    project.calcBudget = function() { 
        console.log(2000);
    };                         // TypeError: Cannot assign to read only property 'calcBudget' of object
    project.calcBudget();  // never get to this line. Without the decorator it would be 1000



Parameter decorators can be attached to the parameters passed into methods. 

    // while this is decorator you can still use factories with parameter decorators
    function printInfo(target: any, methodName: string, paramIndex: number) {
        console.log('Target: ', target);
        console.log('Method Name:', methodName, );
        console.log('Parameter Index:', paramIndex);
    }

    class Course {
        name: string;

        constructor(name: string) {
            this.name= name;
        }

        printStudentNumbers(mode: string, @printInfo printAll: boolean) {
            mode;
            if(printAll) {
                console.log(10000);
            } else {
                console.log(2000);
            }
        }
    }

    const course = new Course('Super Course');
    course.printStudentNumbers('anything', true);
    course.printStudentNumbers('anything', false);

    // Target:  Object { … }
    // Method Name: printStudentNumbers
    // Parameter Index: 1
    // 10000
    // 2000



Using Javascript Libraries with TypeScript

----------------------------------------------------------

Let's say you have the latest jQuery code in your index file. A simple example in the body:

    <button>Click Me</button>
    <script
        src="https://code.jquery.com/jquery-3.4.1.min.js"
        integrity="sha256-CSXorXvZcTkaix6Yvo6HppcZGetbYMGWSFlBw8HfCJo="
        crossorigin="anonymous"></script>
    <script>
        $('button').click(function () {
            alert('button was clicked')
        })
    </script>

However if you placed the same jquery code into your app.ts file the compiler will complain about $ (which is a function that takes a selector). TS will not know where that function came from, and that it has been made available globally.

One non-ideal fix is to use 'declare' at the top of your TS file:

    declare var $: any;

This way passes no information to TS. It does not even know the $ is a function. There will be no useful warnings.

A better way is to install type definitions, which are d.ts files (the d is for declaration). You can make your own declarations or import entire declaration files from 3rd parties. Search 'definitly typed' and the library name. You can also just use npm to install a @types, eg npm install -D @types/jquery. Everything in the @types folder is automatically included into your project. 



Some Other Compiler Options
---------------------------------------------------------

When the compiler runs it checks tsconfig to see how it should behave. In addition to the compilerOptions, discuessed above, tsconfig also includes a exclude array. Any folder listed here is ignored by the compiler. However, you can go the other way and replace the exclude array with a files array. Only those files listed will be compiled. However, you wont get an automatic import of declaration files. So you need to explicitly include them in the files array.

    "files": [
        "app.ts",
        "typings/index.d.ts"
    ]

Note, if you just pass one file into the compiler via the command line then agin you wont get typings and it will fail:

    $ tsc app.js --sourceMap    // note the way in which compiler options can be passed into the click


Typescript with React 
------------------------------------

React.Component is a generic class. Generally, you'll create an interface for the props and the state and pass them in.

    interface IProps {
        // ....
    }

    intergace IState {
        // ...
    }

    class myComponent extends React.Component<IProps, IState> {
        // ...
    }

For more detail on using react with typescript check out Microsoft on github: https://github.com/microsoft/TypeScript-React-Starter 



Indexable Types
---------------------------------------

https://www.typescriptlang.org/docs/handbook/interfaces.html#indexable-types

We can also describe types that we can “index into” like a[10], or ageMap["daniel"]. Indexable types have an index signature that describes the types we can use to index into the object, along with the corresponding return types when indexing.

    interface StringArray {
        [index: number]: string;
    }

    let myArray: StringArray;
    myArray = ["Bob", "Fred"];

    let myStr: string = myArray[0];

Or:

    interface NumberDictionary {
        [index: string]: number;
        length: number;    // ok, length is a number
        name: string;      // error, the type of 'name' is not a subtype of the indexer
    }

These get around errors involving accessing object properties with strings.





